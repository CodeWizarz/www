---
layout: markdown_page
title: "GitLab Direction"
description: "Our vision is to replace disparate DevSecOps toolchains with a single application that is pre-configured to work by default across the entire DevSecOps lifecycle."
canonical_path: "/direction/"
extra_css:
  - maturity.css
  - direction.css
---

## On this page
{:.no_toc}

- TOC
{:toc}

## Vision

GitLab’s 10-year product vision is inspired by our mission to make it so that everyone can contribute. Today GitLab is the [DevSecOps Platform](https://about.gitlab.com/solutions/devops-platform/), empowering organizations to maximize the overall return on software development by delivering software faster and efficiently, while strengthening security and compliance. We believe our DevSecOps platform vision is shared by market analysts who have coined it the [Value Stream Delivery Platform market](/analysts/gartner-vsdp21/). Over the next ten years, our vision is to expand GitLab in the following ways.

First, we expect to continue rapidly maturing our DevSecOps platform so that GitLab is able to replace any DevSecOps point solution. To replace any DevSecOps solution will require most of our categories to be lovable, which is likely a 10 year journey. To ensure rapid progress, we have a 3-year [goal](https://about.gitlab.com/company/strategy/#1-accelerate-market-maturity-around-the-devops-platform) to have 50% of our categories at lovable maturity by the end of 2023, and this [three year product strategy](https://about.gitlab.com/direction/#3-year-strategy) articulates our current focus. Once we achieve that goal, there will still be more work to do, but having half our categories lovable will mean most DevSecOps tools are replaceable by GitLab.

Second, we expect GitLab to expand its DevSecOps platform to provide similar support for [ModelOps and DataOps](https://about.gitlab.com/direction/modelops/). Over time, data and machine learning/AI models will increasingly power software experiences. Our customers will need an ability to manage data and its associated ML/AI models in a similar fashion to software projects. We endeavor to support data scientists and data engineers just as we support software developers today, by enabling rapid development, testing, production deployment, and monitoring of data models. We would also expect to automate handling of product usage data collection, GDPR compliance of data under management, cookie and privacy management, experimentation tools, A/B testing, etc.

Third, we expect GitLab to become a creation platform for all digital content. This will require us to expand beyond traditional software development. Possible new digital content creation formats we could support include low code/no code development, design creation, and other creative media like music and movies. It would also likely require enhanced content management to better enable customers to create great digital experiences for their users.

We execute on our vision rapidly and efficiently by leveraging the best practices of 100,000 organizations co-developing the DevSecOps platform of their dreams. We take a
[seed then nurture](/company/strategy/#seed-then-nurture) approach to [maturing our product surface area over time](/direction/maturity/), all the while,
focusing on customer results. We leverage [sensing mechanisms](/handbook/product/product-processes/#sensing-mechanisms) and [product usage data](/handbook/product/performance-indicators/) to make decisions about where to increase or decrease [investment](https://internal.gitlab.com/handbook/product/investment/). You can read more about the principles that guide our prioritization and product thinking in
our [product handbook](/handbook/product/product-principles/).

## 3-year Strategy

### Situation
GitLab competes in a large market space, with a [CSM](https://internal.gitlab.com/handbook/product/investment/) estimated at ~$18B in 2024. GitLab has recently surpassed the $150M ARR milestone, with unusually high revenue growth and retention rates.  GitLab is uniquely positioned in the market with a vision to offer a single application for the entire DevSecOps lifecycle.  GitLab competes across numerous market segments and aims to deliver value in [80+ market categories](/direction/maturity/#category-maturity). GitLab’s product vision is uniquely ambitious, as we were the first DevSecOps player to take a [single application approach](/topics/single-application/). From idea to production, GitLab helps teams improve cycle time from weeks to minutes, reduce development process costs, and enable a faster time to market while increasing developer productivity. With software “eating the world,” this is widely viewed as a mission-critical value proposition for customers.  We also have a number of [tailwinds](/handbook/leadership/biggest-tailwinds/) in the form of cloud adoption, Kubernetes adoption, and DevSecOps tool consolidation, which are helping fuel our rapid growth.  Finally, GitLab has an open source community and distribution model, which has exposed the value of GitLab to millions of developers and has sped up the maturation of our product through [more than 200 monthly improvements](https://gitlab.biterg.io/goto/937475d38035f496df3501c9b30af5ef) to the GitLab codebase from our users.

### Strategic Challenges
1. **Tension between Breadth and Depth:** Our ambitious single-application product vision means we need to build out feature function value across a very large surface area. With so much to deliver in a single application, it is a big UX challenge to keep the experience simple, consistent, and seamless between DevSecOps phases. Our challenge is to drive the right balance between breadth and depth by retaining a [seed then nurture](/company/strategy/) approach in new product areas while simultaneously improving existing product areas that generate usage and revenue. Shifting more focus to product depth will allow us to win and retain sophisticated enterprise customers.  
1. **GitLab.com and Self-Managed:** Another challenge we face is the balance between our self-managed and GitLab.com offerings.  GitLab's early paying customers were more interested in self-managed, and the majority of our customers use this offering today.  As a result, we focused heavily on delivering a great self-managed customer experience.  However, as the market shifts toward cloud adoption, we are seeing an increasing demand for our GitLab.com offering.  We now need to rapidly meet the same enterprise-grade security, reliability, and performance expectations our paying customers have come to expect from self-managed in our SaaS (.com offering).
1. **Wide Customer Profile:** We also serve a wide range of customers, from individual contributor developers to large enterprises, across all vertical markets.  This range of deployment options and customer sizes makes our business complex and makes it hard to optimize the customer experience for all customer sizes.  Over the past few years, we have prioritized enabling our direct sales channel, but in the process have not focused enough on great customer experiences around self-service purchase workflows, onboarding, and cross-stage adoption.
1. **Competition:** Finally, we have formidable competition from much larger companies, including Microsoft, Atlassian, and Synopsys to name a few.  Microsoft is starting to mimic our single application positioning, and while behind us in the journey, have substantial resources to dedicate to competing with GitLab.

### Product Strategy
* **Focus on increasing Stages per Organization [(SpO)](/handbook/product/performance-indicators/#stages-per-organization-spo):** There is a strong correlation between the number of stages customers use and their propensity to upgrade to a paid package.  In fact, **adding a stage triples conversion!**  Each product group should be laser focused on driving adoption and regular usage of their respective stages, as it should lead to higher [Net ARR](/handbook/sales/sales-term-glossary/arr-in-practice/#net-arr), reduced churn, and higher customer satisfaction. As outlined in this [user journey](/handbook/product/product-principles/#multi-feature-usage-adoption-journey), the most important additional stages for customers to adopt are Create to Verify and Verify to Release, as each of these adoption steps open up three additional stages to users.
* **Harness the unique power of a single application:**  GitLab’s primary point of differentiation is our single application approach.  As we continue to drive value in any given stage or category, our first instinct should be to connect that feature or product experience to other parts of the GitLab product.  These [cross-stage connections](#cross-stage-efforts) will drive differentiated customer value and will be impossible for point product competitors to imitate.  Recognizing this opportunity, we have grown our R&D organization significantly over the past two years, and plan to invest an outsized amount on R&D for the next 2-3 years to extend our lead in executing against the single application product vision.
* **Increase wider-community contributions:**    To achieve this ambitious vision more quickly, we will leverage our powerful open source community.  Each stage should have a clear strategy for tiering the value of the stage.  When stages are early in maturity, we will bias toward including as much functionality in our Core open source version as possible, to drive more rapid adoption and greater community contributions, which will help us mature new stages faster.  Once stage adoption is achieved, we can then layer on additional value in paid tiers to encourage upgrades.
* **Make our core journey categories lovable:**  We want to ensure the core product usage experience is great, which will lead to more paying customers and improved customer retention.  We intend to maintain our market-leading depth in stages with lovable categories, which currently are Verify (Continuous Integration) and Create (Source Code Management and Code Review).  Beyond that, we will endeavor to rapidly mature our offering to lovable in Plan (3rd most used stage), Release (4th most used stage), and Secure (important element of our Ultimate tier).  Our [goal](/company/strategy/#sequence) is to have 50% of our categories at lovable maturity by the end of 2023.
* **GitLab-hosted first:**  Most customers don't want to run GitLab themselves (self-managed), so we should build out the offerings where we do it for them (GitLab-hosted). GitLab-hosted includes our SaaS (GitLab.com), any single-tenant offerings, and other GitLab hosted services that self-managed installations can use. Our customer and revenue growth rate for our SaaS offering is faster than our self-managed offering. To meet growing customer demand, our SaaS offering needs to have enterprise-grade security, availability, and performance. We must also ensure feature [parity between self-managed and SaaS](/features/) and that customers have an easy migration path from self-managed to SaaS.  Going forward, all new features should be available on SaaS when they are available on self-managed, if not before. We will also begin offering GitLab-hosted services to self-managed customers to provide additional value that may not be feasible to deliver in a self-managed environment, e.g. automated cloud backups.  Finally, we expect to offer different GitLab-hosted deployment options for single tenant customers and specific geographic regions to meet the regulatory, security and data residency requirements of various customer segments.

#### Product Strategy Learning Session

GitLab CEO and Product leadership discuss the Product Strategy in detail during a [CEO Handbook Learning Session](/handbook/people-group/learning-and-development/learning-initiatives/#ceo-handbook-learning-sessions).

<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/yI29xFAgKoA" frameborder="0" allowfullscreen="true"> </iframe>
</figure>

## Job to be Done

Every product should have a single job that it strives to do. At GitLab we use the [Jobs to be Done](/handbook/product/ux/jobs-to-be-done/) (JTBD) framework. A JTBD is the reason why [people employ a product](/handbook/product/ux/jobs-to-be-done/deep-dive/#what-is-a-jtbd). GitLab's overarching Job to be Done is:

> When we are building software as a team, we want to get from ideas to production with quality, reliability, and security quickly and within budget, so that our organization can deliver promised value and achieve our business outcomes.

## Fiscal year guiding principles

These principles guide our decisions about which areas of the product we will invest in during the current fiscal year.

1. [Depth over Breadth](#depth-over-breadth)
2. [Drive Adoption of Ultimate](#Drive-Adoption-of-Ultimate)
3. [Differentiate](#differentiate)

### Depth over breadth

For the past several years we have focused on breadth over depth. This has allowed us to show our direction as a company and define the Devops Platform market. 

In FY24, we are pivoting to depth over breadth as product depth will allow us to win and retain sophisticated enterprise customers. We will focus on adding depth to the key areas that make GitLab’s [DevSecOps platform](https://about.gitlab.com/platform/) unique. We will invest in developing best-in-class features in areas such as build and deployment, security and compliance, and enterprise agile planning so that GitLab can replace  [existing best-in-class point DevSecOps solutions](https://about.gitlab.com/devops-tools/).

### Drive adoption of GitLab Ultimate

Due to the increasing demands for security and compliance in software development, GitLab Ultimate continues to gain popularity with our customers. We will focus on increasing the value of Ultimate by not only improving security and compliance functionality but also adding value from other key areas within our platform like Plan, Verify, and Data Science.

### Differentiate

Our primary point of differentiation is our [single application](/handbook/product/single-application/) approach: all aspects of our [DevSecOps platform](https://about.gitlab.com/platform/) work seamlessly together, right out of the box, and can be tailored to the specific needs of each organization. 

For FY24, we will reinforce our competitive differentiation by focusing on development that improves the platform as a whole such as improvements to usability, analytics and observability, scalability and deployment, and purchasing ease.

## Fiscal Year Product Investment Themes

Every year at GitLab, we choose some specific areas of emphasis to help guide the teams on the areas of our product that we want to accentuate. This section is used to highlight that emphasis. It is not a comprehensive list of everything we plan to do this year. Direction for each stage and category can be found at the respective [direction pages](https://about.gitlab.com/handbook/product/categories/). We are not asking the teams to deviate from their core mission.

Many teams will see themselves contributing to these areas of emphasis directly. The other teams will continue to execute on their mission - that is also important.

The themes are to help facilitate cross-team collaboration when invariably teams working on the 1-year themes may need to collaborate with others. Our guidance is: if any team approaches you to prioritize something that is thematic for this year, consider that as a higher priority than you would normally - as it is in service of the broader product-wide goal that we, as a company, have deemed important to accomplish this year.

See [Product Investment](https://internal.gitlab.com/handbook/product/investment/) (_internal handbook page_) for how we allocate our R&D investment across our [product hierarchy](https://about.gitlab.com/handbook/product/categories/#hierarchy).

## FY24 Product Investment Themes

For FY24, the four key product investment themes we are focused on are:

1. [World-class DevSecOps experience](#world-class-devsecops-experience)
1. [Advanced security and compliance](#advanced-security-and-compliance)
1. [Observability, analytics, & feedback](#observability-analytics--feedback)
1. [GitLab for Data Science](#gitlab-for-data-science)

<figure class="video_container">
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQcIAR7P4-BbKiq6_NEyDAdC0YEDeObfeGxFWNtnWxreUYtVDflmRF7benfaATzbUxGx0FRJBSOj0px/embed?start=false&loop=false&delayms=3000" frameborder="0" width="1440" height="839" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</figure>

### World-class DevSecOps experience

We will focus on building a world-class DevSecOps experience that includes first class usability, additional collaboration capabilities, and AI-powered workflows.

Examples of this theme are:
* Remote development
* Code Suggestions
* Enterprise agile planning & portfolio management
* [CI/CD Component Catalog](https://gitlab.com/groups/gitlab-org/-/epics/7462)
* Usability improvements (scheduling UXR and SUS impacting issues, left sidebar navigation, command palette)

_Primary Leading Performance Indicator_:

* [SUS Score of 73 by Q4FY24](/handbook/product/ux/performance-indicators/#system-usability-scale-sus-score)

_Secondary Lagging Performance Indicator_:

* TBD

### Advanced security and compliance

We will provide advanced security and compliance to add depth to our Ultimate offering and bring software supply chain security to the forefront of software development.

Examples of this theme are:
* Centralized security policy management
* Better compliance controls and reporting
* [Software supply chain security management](/supply-chain/)

_Primary Leading Performance Indicator_:

* TBD

### Observability, analytics, & feedback

Bring observability, analytics, and feedback into our DevSecOps platform to empower organizations to close the SDLC loop with user data.

Examples of this theme are:
* Product analytics & experimentation
* [Value Streams Dashboard for Executive](https://gitlab.com/groups/gitlab-org/-/epics/9317) & Value Stream Analytics
* [Runner Fleet Visibility](https://gitlab.com/groups/gitlab-org/-/epics/9708)

_Primary Leading Performance Indicator_:

* TBD

### GitLab for Data Science

Suggested Reviewers was released in GitLab 15.4 as our first first user-facing GitLab machine learning (ML) production feature. We will build on this foundation by enabling data scientists and data engineers to bring their workloads into the DevSecOps platform so they can benefit from all the value DevOps offers today including collaboration, reproducibility, and streamlined deployment into production. 

Examples of this theme are:
* [Model registry](https://gitlab.com/gitlab-org/modelops/team-tasks/-/issues/4) &  model analytics
* Advanced cloud GPU/TPU support
* Native ML workflow within GitLab

_Primary Leading Performance Indicator_:

* TBD

## DevSecOps Stages

<%= devops_diagram(["All"]) %>

DevSecOps is a broad space with a lot of complexity. To manage this within GitLab,
we break down the [DevSecOps lifecycle](/solutions/devops-platform/)
into a few different [sections](/handbook/product/categories/#hierarchy), each with its own direction page you can review.

<% data.sections.each do |sectionKey, section| %>
  <% if section.name == "Sec" then %>
    <% line = "* **[#{section.name} Section Direction](#{section.direction})** - Includes the [Software Supply Chain Security Direction](/direction/supply-chain/) and the " %>
  <% else %>
    <% line = "* **[#{section.name} Section Direction](#{section.direction})** - Includes the " %>
  <% end %>
  <% stages = data.stages.stages.select{|stageKey, stage| stage.section==sectionKey} %>
  <% stageLinks = stages.map { |stageKey,stage| "[#{stage.display_name}](#{stage.direction})" } %>
  <% line += stageLinks.to_sentence + " " + "stage".pluralize(stages.count) %>
  <% if stages.count == 1 then %>
    <% stages.each do |stageKey, stage| %>
      <% groups = stage.groups.map { |groupKey, group| "[#{group.name}](#{group.direction})" } %>
      <% line += ", which includes the " + groups.to_sentence + ' ' + "group".pluralize(groups.count) %>
    <% end %>
  <% end %>
<%= line %>
<% end %>

### Your Contributions

In addition to addressing the [DevSecOps lifecycle](/solutions/devops-platform/) internally through the above sections, [contributions from the community](/community/contribute/) also help increase our rate of innovation, which [helps mature](/company/strategy/#seed-then-nurture) the stages of our [DevSecOps platform](/platform/). These community contributions are an important part our [company mission](/company/mission/#contribute-to-gitlab-application) and [strategy](/company/strategy/#assumptions).

[Our issue tracker](https://gitlab.com/gitlab-org/gitlab/issues) contains requests made for features and changes to GitLab. Contributing is the best way to
get a feature you want included as we continually merge code to be released in the next version. Please see our [Contribute to GitLab page](/community/contribute/) for more details such as guides to get started contributing, areas looking for contributions, and contribution
acceptance criteria.

## Personas

[Personas](/handbook/product/personas/) are the people we design for. Developers, security professionals, and operations professionals are currently the primary personas we focus on, and we tailor our user experience to their needs. We want GitLab to be the main interface for people in these roles, so they can show up at work, start their day, and load up GitLab. And that’s already happening.

But there are a lot of other roles involved with the development and delivery of software. That is the ultimate GitLab goal - where everyone involved with software development and delivery uses a single application so they are on the same page with the rest of their team. We are rapidly expanding our user experience for [Designers](/handbook/product/personas/#presley-product-designer), [Compliance Managers](/handbook/product/personas/#cameron-compliance-manager), [Product Managers](/handbook/product/personas/#parker-product-manager), and [Release Managers](/handbook/product/personas/#rachel-release-manager). We’ll also be expanding to the business side, with Executive visibility and reporting. While we’re still calling it DevSecOps, we’re really expanding the definition of DevSecOps and delivering it all as a single application.

## Mitigating low-end disruption

GitLab is not immune to disruption. In some ways, it is a sign of success that GitLab is now at a scale where we have to think about low-end disruption. Arguably, a few years ago, GitLab was a low-end disruptor.

Clayton Christensen defines [low-end-disruption](https://online.hbs.edu/blog/post/4-keys-to-understanding-clayton-christensens-theory-of-disruptive-innovation) as follows:

_Low-end disruption refers to businesses that come in at the bottom of the market and serve customers in a way that is "good enough." These are generally the lower profit markets for the incumbent and thus, when these new businesses enter, the incumbents move further "upstream." In other words, they put their focus on where the greater profit margins are._

Our perspective is that low-end disruption is an additional and critical sensing mechanism. This is especially true for the DevSecOps market. We look at the following attributes to figure out if a low-end disruption has anything close to potential product-market resonance. This list is an adaptation of the [Product Zeitgeist Fit](https://a16z.com/2019/12/09/product-zeitgeist-fit/).

   - **Builder Enthusiasm**: Are the most talented, hardest working, or most-in-demand people - the engineers, the developers - so intrigued by the approach that they are working on it, excited by it, and trying to make it a thing?  If that is the case, then there is a good chance that they will eventually make it happen, moving beyond the fringes to the mainstream. Number of stars, forks, and contributions in the repo are some metrics to look for here.
   - **Despite Test**:  When people are using a product despite the fact that it’s not the best thing out there, or, in some cases, that it’s straight-up terrible, it’s a great sign. It shows that the product has a line into something emotional, not solely functional. Wanted, not just needed. In the early days, these products can often feel misunderstood or controversial. At first blush, the conceit may even raise a few eyebrows. But to the people who have been working on those products, they’re so clearly elegant, if temporarily imperfect, solutions to big and important problems that they seem almost obvious once they recognize it. Google Trends and posts on Hacker News are some things to monitor here.
   - **T-shirt test**:  If people with no connection to the company are wearing their t-shirts or putting their stickers on their laptops or wearing their socks, that  desire to associate with the idea indicates as much a movement as a product.

A reason low-end disruptors are able to enter the market is that the feature-absorption by users is lower than the feature-velocity of the established vendor. To address this we  are focused on a [working-by-default configuration principle](https://about.gitlab.com/handbook/product/product-principles/#configuration-principles).

## Maturity

As we add new categories and stages to GitLab, some areas of the product will be deeper and more mature than others. We publish a
list of the categories, what we think their maturity levels are, and our plans to improve on our [maturity page](/direction/maturity/).

We strive to be the best product in the market and to be truly lovable. As the market, customer needs, competitive landscape, and technology change, we should expect our maturities to also change, including changing to a lower maturity rating. By embracing a [focus on improvement](/handbook/values/#focus-on-improvement) and [low level of shame](https://about.gitlab.com/handbook/values/#low-level-of-shame), we encourage moving a maturity down. This is a strong indicator that we are realists about our product with an eye on achieving the best results for our customers.

## Scope

We try to prevent maintaining functionality that is language or platform
specific, because they slow down our ability to get results. Examples of how we
handle it instead are:

1. We don't make native mobile clients. Instead, we make sure our mobile web pages are great.
1. We don't make native clients for desktop operating systems. People can use [Tower](https://www.git-tower.com/) and, for example, GitLab was the first to have merge conflict resolution in our web applications.
1. For language translations, we [rely on the wider community](https://docs.gitlab.com/ee/development/i18n/translation.html).
1. For Static Application Security Testing we rely on [open source security scanners](https://docs.gitlab.com/ee/user/application_security/sast/#supported-languages-and-frameworks).
1. For code navigation, we're hesitant to introduce navigation improvements that only work for a subset of languages.
1. For [code quality](https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html), we reuse Code Climate Engines.
1. For building and testing with [Auto DevOps](https://docs.gitlab.com/ee/topics/autodevops/), we use Heroku Buildpacks.

Outside our scope are Kubernetes and everything it depends on:

1. **Network** (fabric) [Flannel](https://github.com/coreos/flannel/), Openflow, VMware NSX, Cisco ACI
1. **Proxy** (layer 7) [Envoy](https://www.envoyproxy.io/), [nginx](https://nginx.org/en/), [HAProxy](http://www.haproxy.org/), [traefik](https://traefik.io/)
1. **Ingress** [(north/south)](https://networkengineering.stackexchange.com/a/18877) [Contour](https://github.com/heptio/contour), [Ambassador](https://www.getambassador.io/),
1. **Service mesh** [(east/west)](https://networkengineering.stackexchange.com/a/18877) [Istio](https://istio.io/), [Linkerd](https://linkerd.io/)
1. **Container Scheduler** we mainly focus on Kubernetes, other container schedulers are: CloudFoundry, OpenStack, OpenShift, Mesos DCOS, Docker Swarm, Atlas/Terraform, [Nomad](https://nomadproject.io/), [Deis](http://deis.io/), [Convox](http://www.convox.com/), [Flynn](https://flynn.io/), [Tutum](https://www.tutum.co/), [GiantSwarm](https://giantswarm.io/), [Rancher](https://github.com/rancher/rancher/blob/master/README.md)
1. **Package manager** [Helm](https://github.com/kubernetes/helm), [ksonnet](https://ksonnet.io/)
1. **Operating System** Ubuntu, CentOS, [RHEL](https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux), [CoreOS](https://coreos.com/), [Alpine Linux](https://alpinelinux.org/about/)

During a presentation of Kubernetes, Brendan Burns talks about the four Ops layers
at [the 2:00 mark](https://youtu.be/WwBdNXt6wO4?t=120):

1. Application Ops
1. Cluster Ops
1. Kernel/OS Ops
1. Hardware Ops

GitLab helps you mainly with application ops. And where needed, we also allow you
to monitor clusters and link them to application environments. But we intend to
use vanilla Kubernetes, instead of something specific to GitLab.

Also outside our scope are products that are not specific to developing,
securing, or operating applications and digital products.

1. Identity management: Okta and Duo, you use this mainly with SaaS applications
   you don't develop, secure, or operate.
1. SaaS integration: Zapier and IFTTT
1. Ecommerce: Shopify

In scope are things that are not mainly for SaaS applications:

1. Network security, since it overlaps with application security to some extent.
1. Security information and event management (SIEM), since that measures
   applications and network.
1. Office productivity applications, since
   ["We believe that all digital products should be open to contributions, from legal documents to movie scripts and from websites to chip designs"](/company/strategy/#why)

We expect GitLab to continue to grow, and we have several ideas for [possible future stages](/handbook/product/categories/#possible-future-stages)

## Quarterly Objectives and Key Results (OKRs)

To make sure our goals are clearly defined and aligned throughout the
organization, we make use of OKRs (Objectives and Key Results). Our [quarterly Objectives and Key Results](/company/okrs/)
are publicly viewable.

## FY24 Roadmap

<figure class="video_container">
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQcIAR7P4-BbKiq6_NEyDAdC0YEDeObfeGxFWNtnWxreUYtVDflmRF7benfaATzbUxGx0FRJBSOj0px/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
</figure>

## How we plan releases

At GitLab, we strive to be [ambitious](/handbook/product/product-principles/#how-this-impacts-planning),
maintain a strong sense of urgency, and set aspirational targets with every
release. The direction items we highlight in our [kickoff](/handbook/product/product-processes/#kickoff-meetings)
are a reflection of this ambitious planning. When it comes to execution, we aim
for
[velocity over predictability](/handbook/engineering/development/principles/#velocity-over-predictability).
This way, we optimize our planning time to focus on the top of the queue and
deliver things fast. We schedule 100% of what we can accomplish based on past [Development Department merge request rate](/handbook/engineering/development/performance-indicators/#development-department-mr-rate)
and availability factors (vacation, contribute, etc.).

See our [product handbook on how we prioritize](/handbook/product/product-processes/#how-we-prioritize-work).

## Previous releases

On our [releases page](/releases/), you can find an overview of the most
important features of recent releases and links to the blog posts for each
release.

## Upcoming releases

GitLab releases a new version [every single month](/blog/2015/12/07/why-we-shift-objectives-and-not-release-dates-at-gitlab/). You can find the
major planned features for upcoming releases on our [upcoming releases page](/upcoming-releases/) or see the [upcoming features for paid tiers](/direction/paid_tiers/).

Note that we often move things around, do things that are not listed, and cancel
things that _are_ listed.

## ML/AI at GitLab

With Gitlab 15.4, Suggested Reviewers was released as our first customer-facing ML/AI technology in production features. We have additional ambitions [in the near future](/direction/modelops/ai_assisted/) for several types of problems. This is the focus of our new [ModelOps stage](/direction/modelops/).

## Cross-Stage Efforts

GitLab consistently strives to deliver a cohesive experience that enables workflows that span the DevSecOps loop. We have a number of existing capabilities and planned improvements that do just that:



#### Footnotes

1. IDC, Worldwide DevOps Software Tools Forecast, 2020–2024, Doc # US45188520, July 2020
