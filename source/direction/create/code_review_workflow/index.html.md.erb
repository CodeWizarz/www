---
layout: markdown_page
title: "Category Direction - Code Review Workflow"
description: "The Code Review Workflow strategy page belongs to the Code Review group of the Create stage. Learn more here!"
---

- TOC
{:toc}

## Code Review Workflow

| | |
| --- | --- |
| Stage | [Create](/direction/create/) |
| Maturity | [Loveable](/direction/maturity/) |
| Content Last Reviewed | `2023-10-26` |

## Introduction and how you can help

Thanks for visiting this direction page on Code Review in GitLab. This page belongs to the [Code Review](/handbook/product/categories/#code-review-group) group of the Create stage and is maintained by Kai Armstrong ([E-Mail](mailto:karmstrong@gitlab.com)).

This direction is constantly evolving and everyone can contribute:

 - Please comment and contribute in the linked [issues](https://gitlab.com/groups/gitlab-org/-/issues/?sort=updated_desc&state=opened&label_name%5B%5D=Category%3ACode%20Review%20Workflow) and [epics](https://gitlab.com/groups/gitlab-org/-/epics?state=opened&page=1&sort=start_date_desc&label_name[]=Category:Code+Review+Workflow) on this page. Sharing your feedback directly on GitLab.com or submitting a merge request to this page are the best ways to contribute to our strategy and vision.
 - Please share feedback directly via email, Twitter, or [schedule a video call](https://calendly.com/gitlabkai). If you're a GitLab user and have direct knowledge of your need for Code Review, we'd especially love to hear from you.

## Strategy and Themes
<!-- Describe your category. Capture the main problems to be solved in market (themes). Describe how you intend to solve these with GitLab (strategy). Provide enough context that someone unfamiliar with the details of the category can understand what is being discussed. -->

Code Review is an essential activity of software development. It ensures that contributions to a project maintain and improve code quality and security, and is an avenue of mentorship and feedback for engineers. It can also be one of the most time consuming activities in the software development process.

**GitLab's guiding principle for Code Review is:** Reviewing code is an activity that ultimately improves the resulting product, by improving the quality of the code while optimizing for the speed at which that code is delivered.

The Code Review process begins with authors proposing changes to an existing project via a change proposal. Once they've proposed the changes they need to request feedback from peers (Developers, Designers, Security and Operations Teams, Product Managers, etc) and then respond to that feedback. Ultimately, a merge request needs to be approved and then merged for the Code Review process to be completed for a given changeset.

<a name="vision"></a>
**GitLab's vision for code review is a place where:**

- **changes can be discussed,**
- **developers can be mentored,**
- **knowledge can be shared,**
- **defects identified, and**
- **contributions delivered.**

In GitLab, Code Review takes place in the [merge request](https://docs.gitlab.com/ee/user/project/merge_requests/). **GitLab should make these tasks efficient and easy, so that velocity and code quality and security both increase while allowing for future iterations.**

The code review process involves at least two roles (author, and reviewer) but may involve many people,
who work together to achieve code quality standards and mentor the author.
Furthermore, many reviewers are often not Developers.
Reviewers may be Developers, Product Designers, Product Managers, Technical Writers, Security Engineers and more.

In support of GitLab's [vision](#vision) for code review, areas of interest and improvement can be organized by the following themes:

- **Ease of use** influences whether users choose to use the GitLab tool to merge branches instead of simply interacting with the Git server via command line. Merge requests should be easy to use and provide enough visible value such that users will default to use merge requests.
- **Love-ability** captures the essence that GitLab is enjoyable to use, which may mean that it is fast, invisible and allows you to get your work done. Particularly, GitLab should encourage the best of communication between colleagues and contributors, helping teams celebrate great contributions of all kinds, and express their ideas without misunderstandings. How GitLab communicates with people, will influence how people communicate with each other inside GitLab.
- **Efficiency** directly influences velocity within the time span of a single merge request
    - *Author efficiency* considers how a merge request author can create and address code review feedback, find a relevant reviewer (with [suggested reviewers](https://docs.gitlab.com/ee/user/project/merge_requests/reviews/#suggested-reviewers)) for their merge request, and incorporate incoming feedback.
    - *Reviewer efficiency* considers how an individual reviewer can review a code change, leave feedback, and also verify their own feedback has been addressed. Provide enhanced context when reviewing new information (for example, through code intelligence) for efficiency.
    - *Team efficiency* considers a team can coordinate and communicate responsibilities, progress and status of a merge request, and quickly the entire process can be completed. Support workflows that enable new and better ways of working (for example, suggest changes, commit by commit review).
- **Best practices** Influence efficiency of teams and projects over a longer time scale, and can include fostering norms and behaviours that aren't explicitly enforced through the application. Amplifying best practices, great defaults and documentation play a significant role in this.
- **Policy** controls that allows code review requirements to be set and enforced, going above and beyond amplifying and encouraging best practice. We're partnering with the Compliance team to help [bring existing controls up to higher levels](https://gitlab.com/groups/gitlab-org/-/epics/4367) to make compliance easier across your organization.

## 1 year plan
<!--
1 year plan for what we will be working on linked to up-to-date epics. This section will be most similar to a "road-map". Items in this section should be linked to issues or epics that are up to date. Indicate relative priority of initiatives in this section so that the audience understands the sequence in which you intend to work on them. 
 -->

<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/2s04MqQCeEg" frameborder="0" allowfullscreen="true"> </iframe>
</figure>

**Feature Enhancements**

- **In Progress:** [Request changes on merge requests](https://gitlab.com/groups/gitlab-org/-/epics/11719)

    When you've completed your review of a merge request it's important signal to the author what your expecations are. We'll be working to add an additional status when completing your review that shows you're intending for the author to make further changes prior to the merge request being accepted.

- **Later:** [Automatically merge when merge checks pass](https://gitlab.com/groups/gitlab-org/-/epics/10874)

    This effort will allow merge requests to be configured to merge when all required checks have passed. This saves time/effort for users who can merge as they don't need to wait for the last approval or some other change, they can just set something to merge and when the merge request is able, it will be merged.

- **Later:**  [Review Rounds](https://gitlab.com/groups/gitlab-org/-/epics/9577)

    The Review Rounds work is encompassing of efforts like `Request changes on merge requests` from above, but continues to build on this effort. We'll be evaluating the opportunities we've uncovered and working to iteratively delivery on continued enhancements to the review experience.

**AI Assisted Integrations & Explorations**

As GitLab continues to expand it's reach and capabilities with the latest technology around language models and AI assisted workflows we're looking to enhance the merge request workflow with these capabilities.

- **In Progress:** [Summarize proposed changes in a merge request](https://gitlab.com/groups/gitlab-org/-/epics/10223)

    We'll continue to expand our summary efforts on merge requests to improve the experience as we work to mature this feature further. We're currently looking at the quality of the summary and placement of the summary within the merge request.

- **Later:** [Merge request AI Explorations](https://gitlab.com/groups/gitlab-org/-/epics/10273)

    As we continue to develop ideas for investigation we'll add them to this epic. If you have ideas of things we can explore as part of journey in to this area, please contribute ideas here.

**Performance & Reliability Improvements**

- **In Progress:** [New Diffs Architecture](https://gitlab.com/groups/gitlab-org/-/epics/11559)

    Diffs are at the center of the merge request within GitLab. We're working on a new architecture for diffs that improves performance and allows us to build more features on top of them.

- **In Progress:** [Partition merge_request_diff_* tables](https://gitlab.com/groups/gitlab-org/-/epics/11231)

    Code Review has a number of tables that can grow in size and resource usage as teams continue usage of merge requests. We're looking to optimize this usage to improve performance and reliablity of GitLab instances.

**Research & Design Efforts**

- **In Progress:** [Review Rounds](https://gitlab.com/groups/gitlab-org/-/epics/9577)

    Code reviews typically involve multiple rounds of review as feedback is given, iterations made, and re-reviews happen. Understanding which merge requests a user needs to act on and the role they're playing in the merge request is an important part of communicating both state and responsiblity. We're looking in to more structured rounds of reviews to better inform users not only of what action is needed, but also when that action is needed.

### What is next for us
<!-- This is a 3 month look ahead for the next iteration that you have planned for the category. This section must provide links to issues or
or to [epics](https://about.gitlab.com/handbook/product/product-processes/#epics-for-a-single-iteration) that are scoped to a single iteration. Please do not link to giant epics that lack clarity on what is next. -->

- [Suppress display of generated files](https://gitlab.com/groups/gitlab-org/-/epics/9903) - we've begun much of the backend work to be able to identify generated files that might not need diffs. We'll look at making this data user facing in future iterations to improve the usability and performance of merge requests.

- [Use `patch-id` to identify diffs](https://gitlab.com/groups/gitlab-org/-/epics/10249) - There are many actions within the merge request that are based on understanding if the substance of the changes is different. We're enabling identification via `patch-id` so that operations related to approvals, reviews, and other items can understand if things have changed.

### What we are currently working on
<!-- Scoped to the current month. This section can contain the items that you choose to highlight on the kickoff call. Only link to issues, not Epics.  -->

- [Complex merge order dependencies](https://gitlab.com/gitlab-org/gitlab/-/issues/11393) - We're removing limitations in dependency changes to allow more complex and nested merge request dependencies.
- [Simplify merge request merge widget states](https://gitlab.com/groups/gitlab-org/-/epics/11416) - this effort is part of simplifiying how we calculate when something is able to be merged. It's part of a larger effort to enable [automatically merge when ready](https://gitlab.com/groups/gitlab-org/-/epics/10874).

**AI Assisted Integrations & Explorations**

We're continuing to build on [summarize the proposed changes in a merge request](https://gitlab.com/groups/gitlab-org/-/epics/10223) to make it easier for authors to communicate to reviewers what their changes do. We're focusing on prompt improvements for more accurate summaries as well as UI improvements to where we show the summary.

### What we recently completed
<!-- Lookback limited to 3 months. -->

- [Comment Templates](https://about.gitlab.com/releases/2023/05/22/gitlab-16-0-released/#comment-templates) - released in GitLab 16.0
- [Target branch rules for merge requests](https://about.gitlab.com/releases/2023/10/22/gitlab-16-5-released/#create-rules-to-set-target-branches-for-merge-requests) - released in GitLab 16.5

Other important issues recently delivered by the group can be seen in [this list](https://gitlab.com/gitlab-org/gitlab/-/issues/?sort=closed_at_desc&state=closed&label_name%5B%5D=group%3A%3Acode%20review&label_name%5B%5D=direction&first_page_size=100).

### What is Not Planned Right Now
<!--  Often it's just as important to talk about what you're not doing as it is to
discuss what you are. This section should include items that people might hope or think
we are working on as part of the category, but aren't, and it should help them understand why that's the case.
Also, thinking through these items can often help you catch something that you should
in fact do. We should limit this to a few items that are at a high enough level so
someone with not a lot of detailed information about the product can understand -->

- [Cross-project code review (group merge requests)](https://gitlab.com/groups/gitlab-org/-/epics/882): Is not something the group is currently focused on solving. While we recognize that this is a workflow some teams require we're currently focused on improving support for existing review workflows within GitLab.
- [Commit by commit code review](https://gitlab.com/groups/gitlab-org/-/epics/285): Is not the primary code review flow within GitLab that we're currently optimizing for. We understand that some users prefer to review code this way, and there is basic tooling to support this workflow, but we're focused on our primary review process within GitLab.
- [Block merge request with a negative approval signal](https://gitlab.com/gitlab-org/gitlab/-/issues/761): Having a single way to block merge requests is not inline with how we view the review process. We'd like to continue to explore [expressive merge request comments](https://gitlab.com/groups/gitlab-org/-/epics/4349) as a way to further classify types of threads and potentially extend it with [restricting roles that can resolve threads](https://gitlab.com/gitlab-org/gitlab/-/issues/343479) to achieve similar controls.

## Best in Class Landscape 
<!-- Summary of the competitive landscape for top 3 competitors. Identification of the competitor which we consider to be "Best in Class" and why. Link to epics/issues that would close the gaps between and us and that competitor. 

(For non-marketing categories this section is optional) 
-->

GitLab competes with both dedicated and integrated code review tools. Because merge requests (which is the code review interface), and more specifically the merge widget, is the single source of truth about a code change and a critical control point in the GitLab workflow, it is important that merge requests and code review in GitLab is excellent. Our primary source of competition and comparison is to **dedicated code review tools**. See the [best in class analysis](https://internal.gitlab.com/handbook/product/best-in-class/create/#code-review) for an overview. For a closer look at the user experience and feature set of competitor tools see [these details](https://internal.gitlab.com/handbook/product/best-in-class/create/code_review_workflow/). (Both links are internal only).

## Maturity Plan
<!-- It's important your users know where you're headed next. The maturity plan section captures this by showing what's required to achieve the next level. The
section should follow this format:

This category is currently at the XXXX maturity level, and our next maturity target is YYYY (see our [definitions of maturity levels](https://about.gitlab.com/direction/maturity/)).

- Link to maturity epic if you are using one, otherwise list issues with maturity::YYYY labels) 

(For non-marketing categories this section is optional)  -->

This category is currently at the **Loveable** maturity level (see our [definitions of maturity levels](https://about.gitlab.com/direction/maturity/)).

## Target Audience
<!--
List the personas (https://about.gitlab.com/handbook/marketing/strategic-marketing/roles-personas#user-personas) involved in this category.

Look for differences in user's goals or uses that would affect their use of the product. Separate users and customers into different types based on those differences that make a difference.
-->

Code review is used by software engineers and individual contributors of all kinds. Depending on their context, however, the workflow and experience of code review can vary significantly.

- **full time contributor** to a commercial product where reducing cycle time is important. The review cycle is tight and focussed as a consequence of best practices where keeping merge requests small and iterating at a high velocity are objectives. Code review workflows for these users are **Complete**
- **occasional contributor** to an open source product where cycle time is typically longer as a consequence that they are not working on the project full time. This results in longer review times. When long review times occur, the participants in the merge request will need to spend more time reacquainting themselves with the change. When there are non-trivial amounts of feedback this can be difficult to understand. Code review workflows for these users are **Complete**
- **scientific projects** frequently have a different flow to typical projects, where the development is sporadic, and changes are often reviewed after they have been merged to master. This is a consequence of the high code churn associated with high exploratory work, and having infrequent access to potential reviewers. Post-merge code review workflows are not yet viable in GitLab.

We primarily focus research efforts around [Sasha (Software Developer)](/handbook/product/personas/#sasha-software-developer).
