### What we recently completed

The Create stage has been actively delivering updates to help your development teams collaborate faster and more effectively. Here are some highlights from recent releases:

- [Real-time merge request reviewer updates](https://gitlab.com/groups/gitlab-org/-/epics/8333) - You can now view real-time updates on reviewers of a merge request that update when a reviewr is added or removed or when someone has approved.
- The [Web IDE Beta](https://gitlab.com/groups/gitlab-org/-/epics/9165) was released in GitLab 15.7, enabled by default for GitLab.com and available behind a feature flag for self-managed instances. The Web IDE Beta will be enabled by default for self-managed instances in GitLab 15.11.
- [Remote Development was recently release at minimal maturity](https://gitlab.com/groups/gitlab-org/-/epics/9189) with the ability to connect to a remote self-hosted server via the Web IDE
- [View Source Code rules organized by branch](https://gitlab.com/groups/gitlab-org/-/epics/8578) - GitLab offers a number of controls that can be implemented as safeguards. These controls such as protected branches, approval rules, code owners approvals, and many more can be put in place to enforce adherence to policies that ensure quality. A recent SUS study and other feedback suggest that users struggle to find the different controls and struggle to understand which settings interact how. Framework for Source Code Rules aims at making it easier and more intuitive to administer your Source Code management tool.
- [GitLab adopted the open source project 'glab' as our CLI](https://gitlab.com/groups/gitlab-org/-/epics/7514)

### What we are currently working on

- Source Code Management - [Edit source code rules organized by branch](https://gitlab.com/groups/gitlab-org/-/epics/8075) - This is the next iteration of the larger effort to establish a framework for source code rules. Now that rules are co-located, we are working on ebaling the editing of these rules from that interface.
- Code Review Workflow - [Real-time merge widget updates](https://gitlab.com/groups/gitlab-org/-/epics/8639) - The merge button widget in the merge request takes inputs from lots of different checks and actions on the page. This effort is improving the real-time state change for the button based on user actions.
- GitLab CLI - [Maturing the GitLab CLI](https://gitlab.com/groups/gitlab-org/-/epics/3324) - GitLab recently adopted the open source command line application [glab](https://glab.readthedocs.io/en/latest/) which expanded our reach to users who prefer to work in their terminal. We are currently doing [research](https://gitlab.com/groups/gitlab-org/-/epics/9517) to understand what parts of developer workflows, such as code review or pipeline authoring, people want to be able to do from the CLI.
- Remote Development - Ability to [define, create, interact](https://gitlab.com/groups/gitlab-org/-/epics/10122) and [secure](https://gitlab.com/groups/gitlab-org/-/epics/9837) a workspace inside GitLab 
- Web IDE - [Finish replacing the Web IDE with client-only VS Code](https://gitlab.com/groups/gitlab-org/-/epics/7683) - Replace the current Web IDE, which is based on the open sourced Monaco editor, with a client-side instance of VS Code and implement custom extensions for creating commits and interacting with MRs.
- AI Integrations in [development](https://gitlab.com/groups/gitlab-org/-/epics/10218) and [code review](https://gitlab.com/groups/gitlab-org/-/epics/10223) workflows 

### What is next for us

To meet our [big hairy audacious goal](https://about.gitlab.com/company/mission/#big-hairy-audacious-goal), the Create stage will focus on the following this year: 
- Source Code Management - The [edit source code rules organized by branch](https://gitlab.com/groups/gitlab-org/-/epics/8075) will take multiple quarters
- Code Review Workflow -  [Improve the experience for users performing multiple rounds of code reviews on MRs](https://gitlab.com/groups/gitlab-org/-/epics/9577) - Code reviews typically involve multiple rounds of review as feedback is given, iterations made, and re-reviews happen. Understanding which merge requests a user needs to act on and the role they're playing in the merge request is an important part of communicating both state and responsiblity. We're looking in to more structured rounds of reviews to better inform users not only of what action is needed, but also when that action is needed.
- GitLab CLI - [OAuth for GitLab CLI](https://gitlab.com/groups/gitlab-org/-/epics/9363) - We need to refine the logic for authentication and better document many of the options around the config, flags and environment variables.
- Remote Development - [Connect to a workspace via SSH](https://gitlab.com/gitlab-org/gitlab/-/issues/381167) and [from the Web IDE](https://gitlab.com/groups/gitlab-org/-/epics/9896)
- Web IDE - [Install VS Code extensions in the Web IDE](https://gitlab.com/groups/gitlab-org/-/epics/7685) and [pre-install the GitLab Workflow extension](https://gitlab.com/groups/gitlab-org/-/epics/9842), enabling MR discussions and providing insight into pipeline status from an extensible Web IDE.
- We will continue to experiment with [integrating AI into coding and code review workflows](https://gitlab.com/groups/gitlab-org/-/epics/9997)

### What we are not doing

The following will not be a focus over the next 12 months:
- [Commit by commit code reviews](https://gitlab.com/groups/gitlab-org/-/epics/285) - Is not the primary code review flow within GitLab that we're currently optimizing for. We understand that some users prefer to review code this way, and there is basic tooling to support this workflow, but we're focused on our primary review process within GitLab.
- [Branch read access controls](https://gitlab.com/gitlab-org/gitlab-ee/issues/720) - Limiting which branches a user can read in a Git repository is possible in a basic sense, by only advertising a subset of refs, but it is not possible to guarantee that unreachable objects will not be sent to the client. This means that branch read access controls would be very weak, since they could not prevent exfiltration of data they do not have permission to read.
- Editor-agnostic solution for Remote Development - Our initial iterations will focus on support for VS Code. The vast majority of developers are using VS Code and facilitating the connection between a VS Code client and host simplifies the architecture. Support for vim, JetBrains editors, Xcode, or other IDEs will come as the category reaches Complete or Loveable maturity.


