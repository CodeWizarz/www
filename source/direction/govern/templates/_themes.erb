### Top-down security controls

Security teams need centralized management for their security and compliance workflows.  Features such as compliance labels, security policies, and the vulnerability and dependency lists need to allow for centralized management that applies across all of an organization&apos;s projects.

### No compromises with compliance

Govern capabilities will ensure that compliance regulations are strictly followed in a way that they cannot be bypassed without the proper approvals. This includes providing the necessary tools to audit, monitor, and manage the compliance controls that are enforced.

### Coordinate security across GitLab

Govern capabilities will serve as a connection point for a seamless workflow spanning across the DevOps lifecycle.  By enabling collaboration between types of users, Govern can help solidify the advantages GitLab has to offer as a single application.  For example, these areas might include the following:

  - Facilitating a continuous experience for scanning across repositories, registries, and production environments.
  - Centralizing security and compliance controls across GitLab, including merge request approvals, anomalous user activity, and anomalous pipeline/job activity.
  - Leveraging data about production environment configuration to reduce false positives in scanners.
  - Leveraging data about vulnerabilities in development to inform and drive threat mitigation in production.

### Emphasize usability and convention over configuration

Govern capabilities will be [pre-configured with reasonable defaults](/handbook/product/product-principles/#convention-over-configuration) out-of-the-box whenever possible.  When not possible, they will be easy to configure either through code or through a guided UI workflow that is friendly to users without coding knowledge.  Regardless of how the capabilities are configured, they will be stored as code for ease of management.

For example, GitLab&apos;s [security policy editor](https://docs.gitlab.com/ee/user/application_security/policies/#policy-editor) supports editing policies in both a `rule mode` and in `yaml mode`.