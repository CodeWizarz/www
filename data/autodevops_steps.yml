- title: Auto Build
  icon: /includes/icons/public-sector/code-icon.svg
  description: Auto Build creates a build of the application. If you have a Dockerfile, it will use Docker, otherwise, it will use Herokuish and Heroku buildpacks to automatically detect and build the application into a Docker image.<br><br>Either way, the resulting Docker image is automatically pushed to the Container Registry and tagged with the commit SHA.

- title: Auto Test
  icon: /includes/icons/public-sector/checklist-icon.svg
  description: Auto Test automatically runs the appropriate tests for your application by analyzing your project to detect the language and framework using <a href="https://github.com/gliderlabs/herokuish" target="_blank">Herokuish</a> and <a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank">Heroku buildpacks</a>. Several languages and frameworks are detected automatically, but if your language is not detected, you may succeed with a <a href="https://docs.gitlab.com/ee/topics/autodevops/#custom-buildpacks" target="_blank">custom buildpack</a>. Check the <a href="https://docs.gitlab.com/ee/topics/autodevops/#currently-supported-languages" target="_blank">currently supported languages.</a>

- title: Auto Code Quality
  icon: /includes/icons/public-sector/checklist-icon.svg
  description: Auto Code Quality uses the <a href="https://gitlab.com/gitlab-org/ci-cd/codequality" target="_blank">Code Quality image</a> to run static analysis and other code checks on the current code. The report is created, and is uploaded as an artifact which you can later download and check out.<br><br>In GitLab Starter, differences between the source and target branches are also <a href="https://docs.gitlab.com/ee/user/project/merge_requests/code_quality.html" target="_blank">shown in the merge request widget.</a>

- title: Auto SAST
  icon: /includes/icons/public-sector/security-icon.svg
  description: Static Application Security Testing (SAST) uses the <a href="https://gitlab.com/gitlab-org/security-products/sast" target="_blank">SAST Docker image</a> to run static analysis on the current code and checks for potential security issues. Once the report is created, it's uploaded as an artifact which you can later download and check out. In GitLab Ultimate, any security warnings are also <a href="https://docs.gitlab.com/ee/user/application_security/sast/" target="_blank">shown in the merge request widget.</a>

- title: Auto Dependency Scanning
  icon: /includes/icons/public-sector/security-icon.svg
  description: Dependency Scanning uses the <a href="https://gitlab.com/gitlab-org/security-products/dependency-scanning" target="_blank">Dependency Scanning Docker image</a> to run analysis on the project dependencies and checks for potential security issues. Once the report is created, it's uploaded as an artifact which you can later download and check out. In GitLab Ultimate, any security warnings are also <a href="https://docs.gitlab.com/ee/user/application_security/dependency_scanning/" target="_blank">shown in the merge request widget.</a>

- title: Auto License Compliance
  icon: /includes/icons/public-sector/security-icon.svg
  description: License Compliance uses the <a href="https://gitlab.com/gitlab-org/security-products/license-management" target="_blank">License Compliance Docker image</a> to search the project dependencies for their license. Once the report is created, it's uploaded as an artifact which you can later download and check out. In GitLab Ultimate, any licenses are also <a href="https://docs.gitlab.com/ee/user/compliance/license_compliance/index.html" target="_blank">shown in the merge request widget.</a>

- title: Auto Container Scanning
  icon: /includes/icons/public-sector/security-icon.svg
  description: Vulnerability Static Analysis for containers uses <a href="https://github.com/coreos/clair" target="_blank">Clair</a> to run static analysis on a Docker image and checks for potential security issues. Once the report is created, it's uploaded as an artifact which you can later download and check out. In GitLab Ultimate, any security warnings are also <a href="https://docs.gitlab.com/ee/user/application_security/container_scanning/" target="_blank">shown in the merge request widget.</a>

- title: Auto Review Apps
  icon: /includes/icons/public-sector/rocket-icon.svg
  description: <a href="https://docs.gitlab.com/ee/ci/review_apps/index.html" target="_blank">Review Apps</a> are temporary application environments based on the branch's code so developers, designers, QA, product managers, and other reviewers can see and interact with code changes as part of the review process. Auto Review Apps create a Review App for each branch.<br><br>The Review App will have a unique URL based on the project name, the branch name, and a unique number, combined with the Auto DevOps base domain. For example, `user-project-branch-1234.example.com`. A link to the Review App shows up in the merge request widget for easy discovery. When the branch is deleted, for example after the merge request is merged, the Review App will automatically be deleted.

- title: Auto DAST
  icon: /includes/icons/public-sector/security-icon.svg
  description: Dynamic Application Security Testing (DAST) uses the popular open source tool <a href="https://github.com/zaproxy/zaproxy" target="_blank">OWASP ZAProxy</a> to perform an analysis on the current code and checks for potential security issues. Once the report is created, it's uploaded as an artifact which you can later download and check out. In GitLab Ultimate, any security warnings are also <a href="https://docs.gitlab.com/ee/user/application_security/dast/" target="_blank">shown in the merge request widget.</a>

- title: Auto Browser Performance Testing
  icon: /includes/icons/public-sector/checklist-icon.svg
  description: Auto Browser Performance Testing utilizes the <a href="https://hub.docker.com/r/sitespeedio/sitespeed.io/" target="_blank">Sitespeed.io container</a> to measure the performance of a web page. A JSON report is created and uploaded as an artifact, which includes the overall performance score for each page. By default, the root page of Review and Production environments will be tested. If you would like to add additional URL's to test, simply add the paths to a file named `.gitlab-urls.txt` in the root directory, one per line.<br><br>In GitLab Premium, performance differences between the source and target branches are <a href="https://docs.gitlab.com/ee/user/project/merge_requests/browser_performance_testing.html" target="_blank">shown in the merge request widget.</a>

- title: Auto Deploy
  icon: /images/home/monitor-icon.svg
  description: After a branch or merge request is merged into the project's default branch (usually master), Auto Deploy deploys the application to a production environment in the Kubernetes cluster, with a namespace based on the project name and unique project ID, for example `project-4321`.<br><br>Auto Deploy doesn't include deployments to staging or canary by default, but the <a href="https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Auto-DevOps.gitlab-ci.yml" target="_blank">Auto DevOps template</a> contains job definitions for these tasks if you want to enable them. You can also make use of environment variables to automatically scale your pod replicas.<br><br>When the project is deployed to a Kubernetes cluster it is done using the Docker images that have been pushed to the <a href="https://docs.gitlab.com/ee/user/packages/container_registry/index.html" target="_blank">GitLab Container Registry.</a>

- title: Auto Monitoring
  icon: /images/home/monitor-icon.svg
  description: Once your application is deployed, Auto Monitoring makes it possible to monitor your application's server and response metrics right out of the box. Auto Monitoring uses <a href="https://docs.gitlab.com/ee/user/project/integrations/prometheus.html" target="_blank">Prometheus</a> to get system metrics such as CPU and memory usage directly from <a href="https://docs.gitlab.com/ee/user/project/integrations/prometheus_library/kubernetes.html" target="_blank">Kubernetes</a>, and response metrics such as HTTP error rates, latency, and throughput from the <a href="https://docs.gitlab.com/ee/user/project/integrations/prometheus_library/nginx_ingress.html" target="_blank">NGINX server.</a><br><br>You can also <a href="https://docs.gitlab.com/ee/operations/metrics/#adding-custom-metrics" target="_blank">customize the metrics</a> Prometheus collects on your deployed applications, including adding business value metrics.
