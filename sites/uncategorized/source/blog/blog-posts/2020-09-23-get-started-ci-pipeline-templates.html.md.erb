---
title: "How to use GitLab’s CI/CD pipeline templates"
author: Chrissie Buchanan
author_gitlab: cbuchanan
author_twitter: gitlab
categories: insights
image_title: '/images/blogimages/CI-pipeline-templates.jpg'
description: "Learn how pipeline templates and Auto DevOps can get you up and running on GitLab CI/CD."
tags: CI/CD, UI, DevOps
twitter_text: "How pipeline templates can help you get up and running with GitLab CI/CD" # optional;  If no text is provided it will use post's title.
featured: no
postType: content marketing
merch_banner: merch_three
merch_sidebar: merch_three
---

Writing deployment pipelines from scratch is a real pain in the branch. We want to make the [continuous integration](/topics/ci-cd/) experience more automatic so teams can get up and running quickly with [GitLab CI/CD](/topics/ci-cd/).

An easy way to get started is with GitLab’s CI/CD pipeline templates. Pipeline templates come in **more than 30** popular programming languages and frameworks. We’ll show you how to use these pipeline templates for your specific needs.

For an even more automatic continuous integration experience, we also offer [Auto DevOps](/stages-devops-lifecycle/auto-devops/) that does much of the legwork for you. Auto DevOps runs on pipelines automatically when a [Dockerfile or matching buildpack](https://docs.gitlab.com/ee/topics/autodevops/stages.html#auto-build) exists, and identifies dependencies automatically.

## What are CI pipeline templates?

[Pipelines](https://docs.gitlab.com/ee/ci/pipelines/) are an integral component of both continuous integration (CI) and [continuous delivery (CD)](/topics/continuous-delivery/), and continuous deployment (the other "CD"). A deployment pipeline consists of two things:

*   Jobs, which define _what_ to do. For example, jobs that compile or test code.
*   Stages, which define _when_ to run the jobs. For example, stages that run tests after stages that compile the code.

Pipelines consist of one or more stages that run in order and can each contain one or more jobs that run in parallel. These jobs (or scripts) get run by agents, such as a [GitLab Runner](https://docs.gitlab.com/runner/).

At GitLab, pipelines are defined in a `gitlab-ci.yml` file. [CI/CD templates](https://docs.gitlab.com/ee/ci/examples/#cicd-templates) incorporate your favorite programming language or framework into this YAML file. Instead of building pipelines from scratch, CI/CD templates simplify the process by having parameters already built-in.

You can choose one of these templates when you create a `gitlab-ci.yml` file in the UI.

![GitLab CI pipeline templates](https://docs.gitlab.com/ee/ci/img/add_file_template_11_10.png)

Because our CI/CD templates come in more than 30 popular languages, the chances are good that we have the template you need to get started in our [CI template repository](https://gitlab.com/gitlab-org/gitlab/tree/master/lib/gitlab/ci/templates).



## What is Auto DevOps?

[Auto DevOps](/stages-devops-lifecycle/auto-devops/) is a GitLab-exclusive feature that provides predefined CI/CD configurations that automatically detect, build, test, deploy, and monitor your applications. Rather than just accessing a template, Auto DevOps is a setting within your GitLab instance that is [enabled by default](https://docs.gitlab.com/ee/topics/autodevops/#enabled-by-default).

Our [product vision for Auto DevOps](/direction/delivery/auto_devops/) is that everything is fully connected as part of one great GitLab experience. The term Auto DevOps actually comes from the different parts that are automated by Auto DevOps:

*   "Auto CI" – Compile and test software based on best practices for the most common languages and frameworks.
*   "Auto review" – Automatic analysis tools like Code Climate.
*   "Auto deploy" – Based on [Review Apps](/stages-devops-lifecycle/review-apps/) and incremental rollouts on Kubernetes clusters.
*   "Auto metrics" – Collect statistical data from all the previous steps in order to guarantee performances and optimization of the whole process.

Auto DevOps provides great defaults for all the stages and makes use of CI templates. You can [customize Auto DevOps](https://docs.gitlab.com/ee/topics/autodevops/customize.html) to meet your needs, and [manage Auto DevOps with GitLab APIs](https://docs.gitlab.com/ee/topics/autodevops/customize.html#extend-auto-devops-with-the-api).

Learn more about Auto DevOps, check out this video:

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube-nocookie.com/embed/0Tc0YYBxqi4" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->


## Other CI/CD resources

GitLab also provides [CI/CD examples](https://docs.gitlab.com/ee/ci/examples/) so you can learn how to implement GitLab CI/CD for your specific use case. In addition to template files, you can find repositories with sample projects, and step-by-step tutorials for a variety of scenarios, including:

*   [DevOps and Game Dev with GitLab CI/CD](https://docs.gitlab.com/ee/ci/examples/README.md#contributed-examples)
*   [Test and deploy a Ruby application with GitLab CI/CD](https://docs.gitlab.com/ee/ci/examples/test-and-deploy-ruby-application-to-heroku.html)
*   [How to deploy Maven projects to Artifactory with GitLab CI/CD](https://docs.gitlab.com/ee/ci/examples/README.md#contributed-examples)
*   ... And many others

With CI/CD templates and our Auto DevOps product feature, teams can start reaping the benefits of continuous integration without all of the manual configurations. For teams managing sometimes _hundreds_ of projects, it’s not realistic or doable to start from scratch. And with GitLab, you don’t have to.

Curious about our best-in-class continuous integration? [Try GitLab free for 30 days](/free-trial/).

## Related reads

*   ["A beginner's guide to continuous integration"](/blog/2018/01/22/a-beginners-guide-to-continuous-integration/)

*   ["Want a more effective CI/CD pipeline? Try our pro tips"](/blog/2020/07/29/effective-ci-cd-pipelines/)

*   ["3 CI/CD challenges to consider"](/blog/2019/06/05/modernize-your-ci-cd/)

Cover image by [chuttersnap](https://unsplash.com/@chuttersnap?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/laboratory?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
{: .note}
