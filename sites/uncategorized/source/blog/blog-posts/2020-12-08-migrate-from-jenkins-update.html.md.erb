---
title: "How we're improving migrations from Jenkins to GitLab CI/CD"
author: Chrissie Buchanan
author_gitlab: cbuchanan
author_twitter: gitlab
categories: insights
image_title: '/images/blogimages/library/insights.png'
description: "Learn more about our Jenkins Importer category and see what's in the works for easier Jenkins migrations."
tags: CI, CD
cta_button_text: 'Compare GitLab and Jenkins'
cta_button_link: '/blog/2019/11/26/migrating-from-jenkins/'
twitter_text: "How GitLab is making migrations from Jenkins to GitLab CI better"
postType: content marketing
merch_banner: merch_three
related_posts:
  - '/blog/2019/11/26/migrating-from-jenkins/'
  - '/blog/2019/11/05/adsoul-devops-transition-to-gitlab-ci/'
  - '/blog/2019/09/20/jenkins-one-year-later/'
---

Teams that want to migrate from Jenkins to [GitLab CI/CD](/topics/ci-cd/) can run into roadblocks in the migration process. After all, going from a complicated plugin environment to GitLab CI/CD isn't exactly an apples to apples comparison. Teams that want to make the switch to GitLab will need help to ease the transition â€“ so what are we doing to make that transition easier?

We created a Jenkins Importer category direction to bring together documentation and issues around improving the Jenkins migration process. We'll go over a few of the projects that are in progress and our vision for the future of Jenkins migrations.

## What is the Jenkins Importer category?

The [Jenkins Importer](/direction/verify/jenkins_importer/){:target="_blank"} category is a collection of tools and documentation to help teams migrate from their Jenkins environment to GitLab CI/CD as easily as possible. Since we're a company that works [public by default](/handbook/values/#public-by-default){:target="_blank"}, we use these category direction pages for information related to upcoming products, features, and functionality, not necessarily for purchasing or planning purposes.

Ultimately, our goal is to make at least 80% of the automated tasks easy. Having a Jenkins Importer category helps us organize issues and epics around helping unblock teams from migrating to GitLab CI/CD. This category is currently at a "minimal" [level of maturity](/direction/maturity/){:target="_blank"}, meaning the features might be available in the product but are not necessarily in production yet.

With our work being public, you can see our progress and make contributions or comments on these issues.

## Jenkins Importer: Top priority

Our main epic is about [implementing a wrapper](https://gitlab.com/groups/gitlab-org/-/epics/2779){:target="_blank"} around the Jenkinsfile Runner. A wrapper is all about creating a minimum viable change (MVC) that will enable teams to run their Jenkins stack within GitLab while they complete their migration.

Converting a complicated Jenkins enterprise environment into GitLab can be especially complex. For some Jenkins users, they may have thousands of pipelines that need to be converted. The idea of a wrapper came from [a comment](https://gitlab.com/groups/gitlab-org/-/epics/2735#note_295172334){:target="_blank"} on a different issue around improving our [Jenkins migration documentation](https://docs.gitlab.com/ee/ci/migration/jenkins.html){:target="_blank"}. This process can be used to run Jenkins builds in GitLab CI while migrating Jenkinsfiles to the GitLab CI/CD syntax.

## Migrating from Jenkins: Other works in progress

As we continue to receive feedback from the community and [conduct research](https://gitlab.com/gitlab-org/ux-research/-/issues/765){:target="_blank"} on use cases, those findings will impact the maturity of this category. While we're focusing on a wrapper because it will have the most initial value, we have other vision items for the Jenkins Importer category as well, which are summarized below.

### Importer for declarative and imperative Jenkins configuration

This [first issue is a proposal to write a tool](https://gitlab.com/gitlab-org/gitlab/-/issues/208276){:target="_blank"} that can read the newer declarative or imperative syntax (as opposed to JenkinsFiles, a Groovy DSL) and convert it to a valid `.gitlab-ci.yml` file.

### Importer for scripted Jenkins configuration

This [second issue is a proposal for a translator](https://gitlab.com/gitlab-org/gitlab/-/issues/208275){:target="_blank"} that can turn scripted Jenkinsfiles written in Groovy into a YAML syntax.

At GitLab, everyone can contribute. If this category interests you and you'd like to know how we're making migrations easier, feel free to comment on the public issues. If you're interested in helping GitLab test the Jenkins wrapper, join our [public testing issue](https://gitlab.com/gitlab-org/gitlab/-/issues/215675){:target="_blank"} for instructions and to provide your feedback.

Learn more about the benefits of single application CI/CD and see how GitLab and Jenkins compare head-to-head.

Cover image by [Kenrick Mills](https://unsplash.com/@kenrickmills?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/migrate?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
{: .note}
