---
title: "GitLab's unifiied and integrated monitoring strategies"
window_title: "How Unified Monitoring and Deployment Strategies Work"
author: Cesar Saavedra
author_gitlab: csaavedra1
author_twitter: cesar_saavedr
categories: unfiltered
image_title: '/images/blogimages/cd-unified-monitor-deploy/CD-1st-mkt-diff-cover-1275x849.jpg'
description: "Learn about GitLab’s unified and integrated monitoring capabilities and advanced deployment strategies."
tags: CI/CD, DevOps, demo
cta_button_text: 'Watch GitLab’s unified and integrated monitoring and deployment strategies video!' # optional
cta_button_link: 'https://youtu.be/ihdxpO5rgSc'
guest: false
ee_cta: false # required only if you do not want to display the EE-trial banner
install_cta: false # required only if you do not want to display the 'Install GitLab' banner
twitter_text: "" # optional;  If no text is provided it will use post's title.
postType: content marketing # i.e.: content marketing, product, corporate
merch_banner: merch_one
merch_sidebar: merch_one
---

{::options parse_block_html="true" /}



A well integrated and consistent approach to monitoring what is running in production and how it is running can provide not only useful information about the infrastructure and applications but also a feedback loop about how your end users are utilizing your business applications. The ability to visualize what goes into production, what to deploy to production, and who to deploy it to can provide organizations the data to help them select and prioritize capabilities that matter to their customers. In addition, the ability to monitor performance and tracing of deployments allows them to preempt production problems, quickly troubleshoot issues and rollback a release, if needed.

GitLab provides the ability to monitor the performance of a deployment and easily rollback if needed. It also empowers you to choose what to deploy and who to deploy to in production via Feature Flags as well as advanced deployment strategies, like Canary deployments, in a consistent, repeatable, and uniform manner to help make your releases safe, low risk, and worry-free.


Let’s first delve into how GitLab provides the capabilities to quickly release, identify production problems and quickly roll back.

For a release manager, the Environment Dashboard provides a cross-project environment-based view with the big picture of what is going on in each environment:

![environment dashboard](/images/blogimages/cd-unified-monitor-deploy/Env-dashboard.png){: .shadow.medium.center.wrap-text}

The Environment Dashboard also gives easy access to the CD pipeline. In the picture above, clicking on the “blocked” link takes you to the CD pipeline view:

![CD pipeline](/images/blogimages/cd-unified-monitor-deploy/CD-pipeline.png){: .shadow.medium.center.wrap-text}

From the CD pipeline, a release manager can perform a canary deployment and also roll out to production incrementally, for example. The performance job above runs web browser performance tests and determines any degradation or improvement in the measurements and reports them as shown below:

![webperf errors](/images/blogimages/cd-unified-monitor-deploy/Review-webperf-errors.png){: .shadow.medium.center.wrap-text}

A release manager can take this information into consideration to determine whether or not these errors warrant a rollback of the release from production.

![rollback button](/images/blogimages/cd-unified-monitor-deploy/Rollback-click.png){: .shadow.medium.center.wrap-text}

From the production environment window, depicted above, clicking on the rollback environment button, will reset the production to its previous working state.

IT teams often run into issues when building and releasing software and without direct user feedback, they often build out too many features, many of which go unused. Without the ability to test in production, IT organizations spend more time on testing, prolonging release cycles, but quality is only marginally improved. Modern IT teams can overcome these issues by using experimentation systems capabilities, such as feature flags and canary deployments.

![feature flags screen](/images/blogimages/cd-unified-monitor-deploy/ff-screen.png){: .shadow.medium.center.wrap-text}

GitLab supports Feature Flags as shown above. In the example, the defined feature flag named “prods-in-alpha-order-ff” has three strategies:

- For the production environment: provide the feature to 50% of users based on the availability of their IDs

- For the staging environment: provide the feature to the users listed in the user list “prods-in-alpha-order-user-list”

- For the review environment: provide the feature to only one user.

Feature Flags can also be combined with canary deployments. For example, in the picture below, the release manager has chosen to release the canary to half of the nodes in production:

![50 percent rollout](/images/blogimages/cd-unified-monitor-deploy/CD-pipeline-50-percent.png){: .shadow.medium.center.wrap-text}

And this combined deployment can be visualized via the deploy board as follows:

![deploy board](/images/blogimages/cd-unified-monitor-deploy/deploy-board.png){: .shadow.medium.center.wrap-text}

Above, production has four nodes, two of which are running the new canary deployment, and the other two are still running the current production deployment.
 
The combination of canary deployments and feature flags can help gather direct users’ feedback to determine what features are relevant to them, so that an IT organization can focus on these, to shorten release cycle times and deliver higher quality and differentiating value to their users.

Lastly, integrated monitoring plays an important role in the feedback loop for these advanced deployment strategies and experimentation systems. With GitLab’s unified and integrated monitoring, you can track system and application metrics cluster-wide as well as per pod.

![clusterwide monitoring](/images/blogimages/cd-unified-monitor-deploy/clusterwide-monitoring.png){: .shadow.medium.center.wrap-text}

In the picture above, you can see the dashboards that monitor clusterwide metrics. And the picture below shows the dashboards that monitor pod-specific metrics:

![podspecific monitoring](/images/blogimages/cd-unified-monitor-deploy/podspecific-monitoring.png){: .shadow.medium.center.wrap-text}

GitLab provides the ability to monitor the performance of a deployment and easily rollback if needed. It also empowers you to choose what to deploy and who to deploy to in production via Feature Flags as well as advanced deployment strategies, like Canary deployments, in a consistent, repeatable, and uniform manner to help make your releases safe, low risk, and worry-free.

If you’d like to see some of GitLab’s unified and integrated monitoring capabilities and advanced deployment strategies in action, watch this [video](https://youtu.be/ihdxpO5rgSc).

For more information, visit [LEARN@GITLAB](https://about.gitlab.com/learn/).


