---
title: How ten steps over ten years led to the DevOps Platform
author: Brendan O'Leary
author_gitlab: boleary
author_twitter: olearycrew
categories: insights
tags: devops platform, DevOps, inside GitLab
description: It's been ten years since the first commit to GitLab! Here's a look
  at ten critical choices that shaped us.
twitter_text: Ten years since the first commit to GitLab and ten critical
  choices along the way. @olearycrew unpacks how @gitlab got to where it is
  today.
twitter_image: "/images/blogimages/architecture-building-business-258163.jpg"
---

[The first commit to GitLab (!!)](/ten/) was 10 years ago. Today, it’s an entirely different world: DevOps is increasingly mainstream and there's a DevOps platform revolution.

We didn’t have a crystal ball back then, but we did try to create a product, a culture and a company that reflected what we thought mattered most. Here’s a look back at 10 key decisions we made that still have impact:

1. Work in parallel: When we started, it was clear the waterfall method of software development - where one stage waited on another stage and nothing happened independently - slowed everything. We decided right from the beginning that a “work in parallel” philosophy would be fundamental to our culture and our behaviors. Also, such a philosophy naturally supported everything else we did, including bringing CI and CD together and operating as an all-remote company. Working in parallel is also vital to success with DevOps.

2. CI, meet git: To merge dev and ops you have to merge development and operations. We [weren’t really sure](/blog/2020/10/29/gitlab-hero-devops-platform/) bringing CI together with a git repository was the right step to take, but we tried it and [it worked](/blog/2020/07/06/beginner-guide-ci-cd/). Now, developers expect CI to be perfectly integrated into their daily work, and, more and more, they are using a DevOps platform to centralize CI and CD.

3. Cloud native: We’ve been talking about Kubernetes and the options made possible by cloud-native development since [2017](/blog/2017/11/30/containers-kubernetes-basics/). We’re true believers in supporting the ability to embrace cloud-native technology and patterns.  The concept of cloud native enables teams to deliver better software faster, break down their applications into microservices and focus engineering time on delivering value to their customers - not on maintaining brittle infrastructure.

4. The mighty merge request: We doubled down on the idea of a merge request, making it the hub of absolutely everything. Merge requests are not only the gateway to production, but all the other critical steps, such as security checks, which can be found in there as well. Plus, the merge request serves as a living record of changes and is essential for [better code review](/blog/2021/03/18/iteration-and-code-review/).

5. Developer-first security: For developers to have ownership of security, they need scanning early in the process and results in their workflow. That’s why [developer-first security](/topics/devsecops/what-is-developer-first-security/) is at the heart of our DevOps Platform.

6. A complete definition of security: Security isn’t a “one and done” effort and our DevOps Platform enables us to offer a broad spectrum of security scans that goes far beyond just SAST and DAST. From scanning for dependencies or looking at containers, we cover all the security bases in a single platform.

7. All remote, all the time: With no corporate headquarters and employees in 65 countries and regions (as of October 2021), we’re [all remote](/company/culture/all-remote/guide/) and proud of it. This decision transformed into a corporate value that has influenced our choices and behaviors. 

8. Asynchronous communication: A natural result of being remote, [asynchronous communication](/company/culture/all-remote/asynchronous/) is something we take seriously. We’re a [“handbook first”](/company/culture/all-remote/handbook-first-documentation/) organization, meaning we write everything down so information is as self-service as possible. We also carefully consider what time is spent in meetings, limiting their frequency and regularly asking ourselves if “asynchronous” is better. This has allowed us to successfully have employees in nearly every time zone around the world and follow the working in parallel philosophy.

9. Visibility: Planning is critical, but it’s equally important to pair it with visibility so everyone knows what’s happening and where it’s happening. Giving context for the original plan to all team members throughout the DevOps lifecycle, how the plan has changed, and what the implementation looks like in the end is a critical advantage to a single DevOps platform.  Without this, time is wasted trying to update multiple systems with issue status, or having conflicting information in independent tools. 

10. Measure the results: We firmly believe it’s important to know how the stages of the SDLC are going, in detail. After all, if you can’t measure your results, how can you know things are moving in the right direction? Many DevOps teams don’t or can’t measure, but that can make it difficult to convince management of the value of the methodology. A DevOps platform makes measurement easy.

## Read more about the DevOps Platform:

- [The journey to a DevOps Platform](/blog/2021/09/02/the-journey-to-a-devops-platform/)

- [Making the case for a DevOps platform: What data and customers say](/blog/2021/09/08/making-the-case-for-a-devops-platform-what-data-and-customers-say/)

- [Agile planning with a DevOps platform](/blog/2021/05/19/agile-planning-with-a-devops-platform/)

- [Welcome to the DevOps Platform era](/blog/2021/08/03/welcome-to-the-devops-platform-era/)

- [It's time to build more accessible software. A DevOps platform can help](/blog/2021/09/21/how-the-devops-platform-makes-building-accessible-software-easier/)

