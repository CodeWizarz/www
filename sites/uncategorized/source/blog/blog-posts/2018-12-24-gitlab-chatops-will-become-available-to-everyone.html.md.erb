---
title: "We're making GitLab ChatOps available to everyone!"
author: "Sid Sijbrandij" # if name includes special characters use double quotes "First Last"
author_gitlab: sytses # ex: johndoe
author_twitter: sytses # ex: johndoe
categories: company
image_title: "/images/blogimages/holiday-gift.jpg"
description: "As a holiday gift, the ChatOps functionality in GitLab will be open sourced"
tags: company
ee_cta: false # required only if you do not want to display the EE-trial banner
install_cta: false # required only if you do not want to display the "Install GitLab" banner
twitter_text: "Our holiday gift: We're making GitLab ChatOps available to everyone"
featured: yes # reviewer should set
---

GitLab is an open-core project that has both open-source and source-available code.
The [likely type of buyer determines which tier a feature goes into](/company/pricing/#the-likely-type-of-buyer-determines-what-features-go-in-what-tier).
If the buyer for a feature is an individual contributor, we [promise to open-source it](/company/stewardship/#what-features-are-paid-only).

We don't always get this classification right. When something that is already open source should be source-available, we leave it open source â€” and when something should be open-source, we fix it.

The latter is the case for [GitLab ChatOps](https://docs.gitlab.com/ee/ci/chatops/). ChatOps lets you run commands from chat (right now Slack and Mattermost are supported). Running these commands in a channel allow everyone to be on the same page about what happened. We use it in production, for example to publish and deploy GitLab and to run database queries:

![alt text](/images/blogimages/chatops.png "Logo Title Text 1")

We discovered that the people that care most about this feature are individual contributors, so we'll open source this feature in GitLab 11.9.

The ChatOps market has not taken off the way that many of us (including myself) predicted.
The first ChatOps client was Hubot and its popularity [has dwindled since 2015](https://trends.google.com/trends/explore?date=all&geo=US&q=hubot).
I was really excited for the next generation of ChatOps provided by [the Cog project](https://github.com/operable/cog), but the company behind this initiative [had to wind down](https://blog.operable.io/cog-marches-on-8956b4fb74fe).

In talking with industry experts, I think there are five ingredients needed to make ChatOps successful:

1. Monitoring: ChatOps is great for troubleshooting together, so it should be easy to show a graph.
1. Queryability: allow a parameter, for example a SQL command to run, or to show a graph of a specific server. 
1. Permissions: People should have different levels of access, preferably [Role Based Access Control (RBAC)](https://en.wikipedia.org/wiki/Role-based_access_control).
1. Zero-config: You should have access to a lot of functionality without any setup required. 
1. Consistency: ChatOps should work the same throughout the organization.

I think monitoring and queryability were innovations in Hubot. In Hubot anyone with access could do anything, this was fixed when Cog added permissions. GitLab adds zero-config and consistency so that everything works out of the box. Things are able to work out of the box in GitLab because it is a single application for the entire DevOps lifecycle. GitLab knows how to deploy an application with [Auto DevOps](https://docs.gitlab.com/ee/topics/autodevops/). In GitLab you have [monitoring](https://docs.gitlab.com/ee/administration/monitoring/) with metrics and tracing.

Currently the functionality in ChatOps doesn't have commands for deployments and metrics by default. We hope that open-sourcing the functionality will enourage more use of ChatOps and more contributions to it.

The wider community has become more active this year, with more than 150 contributions to all different parts of GitLab in the last release.

For this we are most grateful.
Happy holidays!
