---
title: How we increased our release velocity with GitLab
author: Rahul Bhargava, CTO, Evolphin
categories: engineering
tags: performance, collaboration, CI/CD
guest: true
description: Learn our challenges, reasons for choosing the DevSecOps platform,
  and our end state following the transition.
image_title: /images/blogimages/faster-cycle-times.jpg
twitter_text: Find out how migrating to GitLab helped Evolphin increase our
  release velocity and foster better software review management and
  collaboration.
---
At Evolphin, we have a remotely-distributed software development team creating the [Evolphin Zoom Media Asset Management system](https://evolphin.com/media-asset-management/). Our core R&D team is split across multiple geographies, with staff in India, the U.S., and the Philippines, as well as freelancers around the world. We needed to find new ways to address our team challenges and increase the pace of delivery of our product updates to Evolphin Zoom suite, in response to our customer needs. This blog outlines our challenges, reasons for choosing GitLab, and our end state, including a 30% to 40% increase in our release velocity, following the transition.

## What is a media asset management system? 

With the increased demand for video content for entertainment, marketing, customer engagement, etc., media asset management systems have become increasingly popular for collaborating, organizing, and archiving rich media assets. 

The assorted camera card types, encoding formats, and publishing demands of social media and other video-on-demand services create a heterogenous content creation and publishing industry desperate for order. Media asset management systems are a timely answer to the problem of managing and unifying the diverse media assets characteristic of the industry.

At Evolphin, we’re at the heart of this solution with the Evolphin Zoom Media Asset Management system, an enterprise offering that runs on approximately 4.7 million lines of source code. To address the root of the problem, media asset management products like Evolphin Zoom must rapidly evolve - add new or enhance existing features - to meet customers’ ever-changing needs.

## The problem: Slow updates

Before adopting GitLab, we used Subversion (Tortoise as the UI) as our source code repository and software version management system. We chose Subversion at the time because we needed an on-premises solution, as cloud-based branch management was not widely adopted in 2012 when we started working on the Evolphin Zoom. 

Our branching and merging workflow with Subversion was tedious, slow, and complicated. It took us around four to five weeks to manually manage and merge software changes across branches within this system. This meant that releasing each product update took five weeks at the very minimum. 

## Our requirement: Better collaboration for branch management

We needed a more agile solution to remain responsive to our customers' needs in this fast-paced software development environment. 

As we transitioned to a remotely distributed workforce model, we identified a need for a software version management system designed with decentralized teams in mind. We wanted to be able to create a user story for a new feature in one week, test it with beta users the next week, and release it in production the week after. 

For this level of agility, an affordable, open-source software repository with a platform like GitLab seemed the perfect solution.

## Why GitLab?

With all the necessary tools for software review management and collaboration, GitLab appeared to fit our needs. 

The ability to remotely check changes into a feature branch meant that users could check in a version and trigger a merge request for approval before merging changes from the remote user’s branch into the main software development branch. 

All these features were available under GitLab’s free community version, with a user-friendly, visually-appealing UI that eased our transition from on-premises to cloud-based development. 

## End-state with GitLab

Here is our workflow in numbers:

| Total GitLab projects managed | 44  	   						|	
| Total branches 				| 514	   						|
| Total repo size				| 10.03 GB 						|
| Total users					| 33	   						|
| Total groups					| 15 	   						|
| MFA-enabled					| Yes 	   						|
| Number of files				| 26125 text files  			|
| Number of unique files		| 25090 unique files			|
| Code							| 4,738,187 lines of code 	   	|
| GitLab product plan			| Community plan on the cloud	|


Our new workflow depends on GitLab as the single source of truth for all our source code, binary dependencies, and DevOps projects. We currently have GitLab integrations with our CI/CD pipeline using Jenkins and our issue-tracking system - JetBrains YouTrack. Besides source code management (SCM), we use code review features frequently. In addition,  all our internal docs, requirements gathering, tips and tricks between developers, DevOps, and QA are shared in Wiki. All our collaboration happens over GitLab Wikis and SCM. Our developers and DevOps engineers use the same GitLab repo to make it easy to manage source code and build artifacts for deployment.

Since the pandemic started, we have executed several Amazon Web Services (AWS) cloud-based deployments. Some of our DevOps projects in GitLab are integrated with the AWS cloud formation stacks/scripts to enable consistent tenant deployments for our cloud customers.

## Impact on Evolphin’s customers

The biggest transformation we noticed from adopting GitLab was a more seamless, collaborative, and efficient workflow for our R&D teams. 

For example, a bug fix could be implemented in branches by developers working in parallel, which could then be merged into a pre-production branch for QA. Following the QA review, changes can be pushed to the main production branch for release. 

Being open source, we can easily integrate with CI/CD platforms and the new workflow significantly improved our productivity regarding feature releases, especially taking into consideration our high volume of product updates. With GitLab, we can execute feature releases two to three weeks faster than previously. This includes twice-monthly feature changes, and monthly security updates, with annual major product changes. Overall, our release velocity increased by 30% to 40% just by switching from Subversion to a GitLab-based workflow.

_Rahul Bhargava is the CTO and founder of Evolphin Software._
