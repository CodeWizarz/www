---
title: "Automate your localization with GitLab + Crowdin"
author: Khrystyna Humenna
author_twitter: crowdin
categories: engineering
image_title: '/images/blogimages/gitlab-crowdin-cover.png'
description: "Complete your development workflow by integrating GitLab with Crowdin to help your product speak the same language as the people it’s built for."
guest: true
tags: integrations
---

When developing products like web apps, games, and alike, you have to face the fact that you enter the international market the moment your product is first mentioned on the web. Once you decide to promote your product internationally and expand its reach, you should add localization to your workflow. Crowdin's integration with GitLab means you can seamlessly automate your localization process.

<!-- more -->

A developer needs roughly 15 minutes to add some new texts. If a product is to be translated into, let’s say, 10 languages, the deployment is delayed for at least a week, as after the code is built, translators need time to make the translations. If several developers work on the product updates simultaneously, translations for those would delay each deployment even more. In this scenario, any team is quite unlikely to stay Agile.

## Do localization in an Agile way with the GitLab + Crowdin integration

To be able to constantly ship minimum viable changes, localization should be a part of the development process. Crowdin is a localization management platform that completes your workflow by synchronizing translatable and translated files between your GitLab repository and your Crowdin localization project. This way multiple translators and developers can work simultaneously to deliver great results in less time.

### Integrate Crowdin with your repository

First of all, log into [crowdin.com](https://crowdin.com/) (you can use your GitLab account for this as well), then create a localization project or integrate an existing one. In the Crowdin project settings, you will be able to set up this integration and define whether the translatable texts should be uploaded to Crowdin from the master branch or from the development branches.

Then select the file path for translations, as once they are made in Crowdin, they will be automatically added to your GitLab repository in a merge request. Each time the automatic file sync is completed the merge request in GitLab will be updated with new translations, or a new merge request will be created if the previous one was already merged.

This allows you to review translations before merging them to master and receive up-to-date translations in a few minutes after they are made, as the file sync is completed automatically. Read more details on [how to set up the GitLab + Crowdin integration](https://support.crowdin.com/gitlab-integration/).

<img src="/images/blogimages/gitlab_crowdin_integration.png" alt="GitLab Crowdin integration" style="width: 700px;"/>{: .shadow}

*<small>A view of the integration with GitLab in Crowdin during automated synchronization.</small>*


### Work with Agile translators

Whether you decide to translate your project with the help of in-house translators or a translation agency, they should be Agile so they can make translations of different scope at any time, not just one project at a time.

Crowdin project notification settings allow you to notify translators and other project members every time new texts are added to the project. This way they’ll be able to start making translations once new texts are synchronized with a project in Crowdin. You in your turn will be able to keep an eye on their contributions and overall project activity using Crowdin project reports.

<img src="/images/blogimages/crowdin_project_reports.png" alt="Crowdin project reports" style="width: 700px;"/>{: .shadow}

*<small>Use project reports in Crowdin to easily track the main activities such as translations and approvals.</small>*

## Key points to remember about localization

### Localization is a continuous process

If your product changes and evolves often you should keep the localized versions up to date as well. Each time you add some new functionality, scheduled update, or a small change, the new texts should be localized as well.

### The product’s UI should be flexible

Make sure to use responsive design, as the same phrase in different languages might take up more or less space than the primary language of your product.

### Consistency is important

Creating a style guide, glossary, and using a Translation Memory is a great idea if you want to speed up the translation process and receive consistent translations at the same time.

Crowdin comes with a free 10-day trial and is free of charge for open source projects. [Give it a try!](https://crowdin.com/join)
