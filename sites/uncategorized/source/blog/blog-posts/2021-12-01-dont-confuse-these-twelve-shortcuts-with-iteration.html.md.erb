---
title: Don’t confuse these 12 shortcuts with iteration
author: Sid Sijbrandij
author_gitlab: sytses
author_twitter: sytses
categories: devops platform
image_title: '/images/blogimages/tanuki-bg-full.png'
tags: DevOps, workflow, production
description: Iteration is a GitLab value. Sid Sijbrandij, GitLab’s co-founder
  and CEO, discusses 12 shortcuts that are not iterations to help refine what is
  considered a good iteration.
twitter_text: "#Iteration is not an easy concept. Yet, when you master it,
  benefits abound. Here, I share 12 shortcuts that are often mistaken as
  iteration and why they miss the mark. #SoftwareDevelopment"
---

[Iteration](/handbook/values/#iteration) is one of GitLab’s [top 3 values](/handbook/values/#hierarchy) because it enables everyone to be efficient in how they deliver value to customers and the wider community. Iteration helps us [build our product and improve our work lives](/blog/2020/02/04/power-of-iteration/). 

In essence, iteration is reducing the scope of your next piece of work to the smallest valuable thing possible so that you can deliver it fast. By reducing the scope and delivering to the user, rather than holding it back while finishing a larger scope of work, you benefit in the following ways: 

- Reduce coordination efforts
- Reduce cancellations
- Easier and faster reviews
- Get feedback faster

Iterating helps you ensure that your next step is in the right direction. 

As we’ve practiced iteration at GitLab, I’ve found that when it’s not clearly understood, well-intentioned mistakes can happen. Because iteration is fundamental to everything that we do, it’s critical to regularly reinforce and refine what we define as an iteration. 

To help clarify what is iteration, it helps to see examples of what iteration is not. Here are 12 shortcuts that I’ve seen be mistaken as iteration. 

## 1. Reducing quality

Some people will take shortcuts, which leads to lower quality in the final product or deliverable. You can’t reduce quality to minimize the scope of an iteration. Your iteration needs to meet the same quality standards you would expect for any of your work. 

For example, in the case of a user interface, every button needs to work and be properly styled and aligned. Nothing should feel out of place or unfinished. You can reduce the amount of functionality, but the functionality that you deliver needs to look and function as expected. 

## 2. Avoiding or reducing documentation

When defining the scope of an iteration, make sure you include the right information so that the user can properly understand what happened and can derive value from your work. In the case of a new feature, without proper documentation, the recipient may not understand how to best use the feature, which defeats the purpose of delivering it quickly. 

Iteration will make documentation faster given the reduced scope, so don’t avoid or delay the documentation. 

## 3. Compromising on security

You can’t compromise on security in the spirit of moving faster. An iteration must meet the same security standards and follow all the necessary security practices to ensure that your product and work doesn’t introduce any new vulnerabilities. 

As an example, when building new features in GitLab, no matter how small an iteration is defined, we should always prioritize the protection of customers’ data. 

## 4. Delivering something that's not on the recommended path or on by default

To call an iteration complete, it needs to be on the recommended path or on by default. Otherwise, most users won’t see or benefit from the work.

At GitLab, in the past, we have made the mistake of considering an iteration complete before making a new feature the default or recommended path for all our users, which then results in fewer users for that functionality. To prevent having functionality in the product that users won’t find, we now require that the feature is on the recommended path and on by default before we call the iteration complete. 

For big changes, such as when a feature may have a big impact on user experience or stability, we use feature flags when initially shipping a feature. This is a good strategy to start delivering something gradually into the product, but we don’t consider the iteration done until that feature flag has been removed and the feature is on by default. 

## 5. Shipping something of no value

When considering the smallest scope possible for an iteration, the ultimate test needs to be whether it delivers something of value to the end user. Don’t confuse iteration with making progress on an initiative or checking off items on your to-do list. 

For example, when building a new feature you may need to do a fair amount of set up. You may ship to production code that adds a configuration or capability that you’ll need to build the feature, but it’s completely transparent to the user. While that can be considered progress on your project timeline, it is not an iteration. The iteration completes when the user can start to derive some value from your efforts. 

## 6. An excuse to focus on unimportant items

Iteration will help you move faster and deliver more things, but you still have to prioritize and focus on what’s most important. When picking what to work on, you shouldn’t do first what’s smallest in scope. Instead, pick what will give you the highest value for the effort you’ll put in.

## 7. Changing or lowering goalposts

Changing a goal or lowering a goal is not iteration. Iteration is reducing the scope and keeping it small, but the reduced scope still needs to meet your goals. As you practice iteration, you may set goals for smaller time periods, which is a good practice I recommend. But changing the goal post is not a part of iteration. 

## 8. Revisions you don't ship or publish

It’s a common mistake to confuse revisions with iterations. To clearly understand the difference, see whether you’ve shipped or delivered something of value to the end user. If you haven’t, it is a revision, not an iteration. 

For example, if when writing a blog post you get a draft reviewed and rewritten several times before publishing, those are considered revisions. Your first iteration is completed once you’ve published the first version of the blog post. 

## 9. An excuse to impose unrealistically tight timelines

If you set a timeline, it has to be realistic. I’ve seen instances in which people confuse iteration with just shrinking the timeline to something unrealistic. That is not iterating. Iteration is minimizing scope, but it requires a disciplined review of the scope to ensure that you’re allocating the right amount of time to complete it. 

## 10. An excuse to avoid planning

Sometimes teams confuse iteration with moving quickly on something without planning. This is not iterating. By reducing the scope, there will be less planning involved compared to the initial larger scope. But, no matter how small you make the scope of work, you need to plan, and that planning can be quite involved. You need to set an appropriate timeline to deliver the work and plan appropriately for reviews and dependencies. 

Not planning appropriately for an iteration negatively impacts efficiency, team morale, and can impact people’s lives outside of work. This needs to be avoided. 

## 11. Imposing long hours

Don’t confuse iteration with imposing long working hours for a team. The goal of iterating is to scope work in a way that helps you deliver more tangible value within the same amount of time. Increasing the number of hours that the team works is not iteration. 

## 12. Expecting others to fix your work

When you iterate, you need to take ownership and make sure that the end result is of value and meets all expectations of a finished product. You should not call an iteration complete if the work still requires fixing in order to be of value or meet quality expectations. 

As GitLab grows as a company, reinforcing our Iteration value and staying clear about what is an iteration is fundamental to us [staying a startup](/company/still-a-startup/). I hope these 12 examples that are not iteration are helpful and empower everyone to help identify and correct situations when iteration is used incorrectly. Using iteration correctly will help us continue to move fast and deliver more value to our customers. It will also help keep the day-to-day momentum as we deliver valuable results. 

Watch this GitLab Unfiltered video where I discuss these 12 shortcuts that are not iteration.

<!-- blank line -->

<figure class="video_container">

  <iframe src="https://www.youtube.com/embed/BW6TWwNZzIQ" frameborder="0" allowfullscreen="true"> </iframe>

</figure>

<!-- blank line -->
