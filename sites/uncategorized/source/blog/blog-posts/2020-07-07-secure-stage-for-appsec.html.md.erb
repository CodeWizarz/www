---
title: "How GitLab's application security dashboard helps AppSec engineers"
author: Fernando Diaz
author_gitlab: fjdiaz
author_twitter: awkwardferny
categories: engineering
tags: security, devops, workflow, appsec
twitter_text: "Enhance #AppSec efficiency with GitLab Secure capabilities"
image_title: "/images/blogimages/secure-stage-for-infosec-professionals/ralph-kayden-4Cg5T03B_8s-unsplash.jpg"
description: "GitLab Security features help application security engineers collaborate more efficiently and better assess the security posture of the projects they oversee."
merch_banner: merch_six
featured: no
postType: Technical Marketing
---

[Application Security (AppSec)](/topics/devsecops/) engineers focus on enhancing an application's security, by
finding, resolving, and preventing vulnerabilities. But managing all these
vulnerabilities across different teams and projects is not an easy process. Managing vulnerabilities
can be simplified by using the [GitLab Secure](/stages-devops-lifecycle/secure/)
features found in [GitLab Ultimate](/pricing/ultimate/).

One of the significant capabilities of GitLab Secure is the accurate, automated, and continuous assessment of the
security of your applications and services through a unified dashboard.

In this blog post, I will show four ways GitLab Secure makes life easier for the AppSec
engineer.

---

## Finding vulnerabilities with security scans

The first capability that AppSec engineers will find useful is the robust security scanning capabilities in [GitLab Ultimate](/pricing/ultimate/).

These capabilities allow you to proactively identify vulnerabilities and weaknesses to minimize your security risk
using a variety of defense-in-depth techniques. The security scans include the following:

* [Static Application Security Testing (SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
* [Dynamic Application Security Testing (DAST)](https://docs.gitlab.com/ee/user/application_security/dast/)
* [Container Scanning](https://docs.gitlab.com/ee/user/application_security/container_scanning/)
* [Dependency Scanning](https://docs.gitlab.com/ee/user/application_security/dependency_scanning/)
* [License Scanning](https://docs.gitlab.com/ee/user/compliance/license_compliance/index.html)

![pipeline with security scans](../images/blogimages/secure-stage-for-infosec-professionals/pipeline.png)
GitLab pipeline running security scans
{: .note.text-center}

Simply add a [template](https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates/Security)
to your [.gitlab-ci.yml](https://docs.gitlab.com/ee/ci/yaml/#includetemplate) or by enable [Auto DevOps](https://docs.gitlab.com/ee/topics/autodevops/) to set-up the scans.

When submitting a merge request (MR), the security scans will run and populate the MR with
data on the vulnerabilities detected and how to resolve them. This data allows AppSec engineers
to begin risk analysis and remediation.

## Managing vulnerabilities with the Security Dashboard

The second most useful capability for AppSec engineers is the [Security Dashboard](https://docs.gitlab.com/ee/user/application_security/security_dashboard/), which helps
keep projects organized and summarizes the relevant security details for an application, all in one place.

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube-nocookie.com/embed/t-3TSlChHy4" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

The Security Dashboard in [GitLab Ultimate](/pricing/ultimate/) provides a high-level overview of the status of all the vulnerabilities
detected in groups, projects, and pipelines.

![security dashboard with group view](../images/blogimages/secure-stage-for-infosec-professionals/dashboard-group.png)
Security Dashboard Group-Level view
{: .note.text-center}

By using the Security Dashboard, an AppSec engineer can drill down into each
vulnerability to obtain additional information, such as how to resolve the vulnerability,
how it was handled by the developer, and if a work ticket (or GitLab issue) has been opened
for remediation.

The Security Dashboard also shows which file the vulnerability was detected in. Each vulnerability
is assigned a severity and a report type. By using this information an AppSec Engineer
can quickly identify which items is the most critical for the team to tackle first.

![security dashboard with project view](../images/blogimages/secure-stage-for-infosec-professionals/dashboard-project.png)
Security Dashboard project-level view
{: .note.text-center}

It's important to note the Security Dashboard supports integrations with third-party scanners.
For example, if you are using [WhiteSource](https://www.whitesourcesoftware.com/gitlab/), the
scans results can added to and managed in the Security Dashboard.

## Auditing with the Security Dashboard

A third capability GitLab Secure offers AppSec engineers is auditing. The engineer can use this capability to audit
a project or group based on the vulnerabilities revealed in various tests. By using the Security Dashboard,
the AppSec engineer can see which vulnerabilities have been dismissed, the developer who dismissed them, as
well as the reason why they were dismissed. This is helpful for several reasons:

* Check to make sure the development team is practicing secure coding
* Confirm there are no malicious actors dismissing issues
* Keep track of the status of vulnerabilities which could not be immediately resolved

![security dashboard vulnerability info](../images/blogimages/secure-stage-for-infosec-professionals/dashboard-info.png)
Vulnerability info displayed in Security Dashboard
{: .note.text-center}

An AppSec engineer can also track and create [confidential issues](https://docs.gitlab.com/ee/user/project/issues/confidential_issues.html) from the
Security Dashboard. A team can keep track of the status
of a vulnerability in private, and make sure it is still on track to being resolved when using confidential issues. A
confidential branch can be created along with the issue, so that the development team
can work on a resolution without tipping off malicious actors.

![security dashboard confidential issue creation](../images/blogimages/secure-stage-for-infosec-professionals/dashboard-issue-creation.png)
Confidential issues created via Security Dashboard
{: .note.text-center}

## Managing software licenses

The final capability we recommend AppSec engineers use is our license management.

Typically, developers will use a variety of open source dependencies instead of reinventing the wheel.
There is a problem though: using a dependency with a restrictive license can invalidate your application.

An AppSec engineer is able to add a policy to mark licenses as acceptable or unacceptable for a project and its dependencies.
If an unacceptable license is found, the MR can be blocked. The video below provides
an overview:

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube-nocookie.com/embed/42f9LiP5J_4" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

GitLab Secure capabilities enhance the effiency of AppSec engineers, ultimately
leading to the production of more secure applications and a more security-empowered
development team. Learn more at [DevSecOps](/solutions/dev-sec-ops/) and
checkout the [GitLab Secure direction page](/direction/secure/) for more
information on the upcoming features and integrations.

### Level up your DevSecOps knowledge:

  [GitLab's security tools and the HIPAA risk analysis](https://about.gitlab.com/blog/2019/04/10/gitlab-security-tools-and-the-hipaa-risk-analysis/)
  [A deep dive into the Security Analyst persona](https://about.gitlab.com/blog/2019/02/12/a-deep-dive-into-the-security-analyst-persona/)
  [Compliance made easy with GitLab](https://about.gitlab.com/blog/2020/07/02/compliance-made-easy/)

Cover image by [Ralph Kayden](https://unsplash.com/@ralphkayden) on [Unsplash](https://unsplash.com/photos/4Cg5T03B_8s)
{: .note}

## Learn more about DevSecOps

- [Efficient DevSecOps: 9 tips for shifting left](/blog/2020/06/23/efficient-devsecops-nine-tips-shift-left/)
- [Want better DevSecOps? Try cross-functional collaboration](/blog/2020/07/01/achieve-devsecops-collaboration/)
- [Compliance made easy with GitLab](/blog/2020/07/02/compliance-made-easy/)


<%= partial "includes/blog/blog-merch-banner" %>
