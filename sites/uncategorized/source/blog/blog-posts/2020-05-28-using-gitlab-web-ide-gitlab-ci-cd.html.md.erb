---
title: "How to make small changes using GitLab’s Web IDE"
author: Chrissie Buchanan
author_gitlab: cbuchanan
author_twitter: gitlab
categories: insights
image_title: '/images/blogimages/webide/web-ide-cover.jpg'
description: "A quick three minute demo shows how teams can deliver better apps faster using GitLab CI/CD."
tags: CI/CD, workflows, tutorial
twitter_text: "A quick guide on GitLab’s Web IDE for code changes"
featured: no
postType: content marketing, Technical Marketing
merch_banner: merch_three
related_posts:
  - "/blog/2021/01/07/top-engineering-stories-gitlab/"
  - "/blog/2018/06/15/introducing-gitlab-s-integrated-development-environment/"
  - "/releases/2018/04/22/gitlab-10-7-released/"
---

It’s not enough to say something is quick and easy. To have a better understanding of some of the benefits of using [GitLab CI/CD](/topics/ci-cd/), it’s much better to _show_ you.

In a [short video](https://www.youtube.com/watch?v=6207TKNGgJs&feature=emb_logo), [Itzik Gan-Baruch](/company/team/#iganbaruch) technical marketing manager, demonstrates how to submit a code change using GitLab Web IDE. In three minutes, teams can submit a code change and commit it, trigger a CI pipeline to scan for any errors, and ship the updated application to users.

## Getting started with GitLab Web IDE

All code that gets automatically tested and deployed to production has a human at its source. In GitLab 10.7, we released the [first iteration of our Web Integrated Development Environment (IDE)](/blog/2018/06/15/introducing-gitlab-s-integrated-development-environment/) after observing how non-developers struggled with editing multiple files and committing those changes. Since we believe that [everyone can contribute](/company/mission/#mission), building an editor that was integrated with GitLab that made it easier for anyone to contribute seemed like a natural fit. To access the Web IDE, just click the button from any GitLab project.

![Web IDE](/images/blogimages/CI_demo_blog_May_28/CI_demo_1.png){: .shadow.medium.center}

The Web IDE button
{: .note.text-center}

In this simple project with a job application, you can use the Web IDE to make a code change and push it to a feature branch. Select the file you would like to change from the menu on the left.

![Selecting a file](/images/blogimages/CI_demo_blog_May_28/CI_demo_2.png){: .shadow.medium.center}

Selecting a file from the Wed IDE
{: .note.text-center}

Once you’ve modified the text in that file, add a commit message and create a new branch. Click `Commit` to create a merge request.

![Commit](/images/blogimages/CI_demo_blog_May_28/CI_demo_3.png){: .shadow.medium.center}

Commit to create a merge request
{: .note.text-center}

Your commit generates a merge request, and from here you can add an assignee, tie this code change to a specific milestone, add labels, or add any additional information regarding the change.

![Modify merge request](/images/blogimages/CI_demo_blog_May_28/CI_demo_4.png){: .shadow.medium.center}

Submit merge request
{: .note.text-center}

A new [continuous integration pipeline](/features/continuous-integration/) is triggered automatically. Click on the pipeline to see the stages.

![Pipeline](/images/blogimages/CI_demo_blog_May_28/CI_demo_5.png){: .shadow.medium.center}

Click on the pipeline from the merge request
{: .note.text-center}

In this project, the pipeline needed zero-configuration because it was generated through GitLab's [Auto DevOps](/direction/delivery/auto_devops/) capability. The pipeline has stages and a few jobs within each stage.

![Auto DevOps pipeline](/images/blogimages/CI_demo_blog_May_28/CI_demo_6.png){: .shadow.medium.center}

A CI pipeline automatically configured with GitLab Auto DevOps
{: .note.text-center}

First, it builds a Docker image for the code and pushes it to the container registry. From there, it begins tests and scans jobs that run in parallel to help speed up the pipeline.

![Pipeline jobs](/images/blogimages/CI_demo_blog_May_28/CI_demo_7.png){: .shadow.medium.center}

Click on a job within the pipeline stage to get more information
{: .note.text-center}

By clicking on a job within the stage, you can see what happens.

![dependency scan](/images/blogimages/CI_demo_blog_May_28/CI_demo_8.png){: .shadow.medium.center}

Dependency scanning details
{: .note.text-center}

Once all tests are completed, all test results will be added to the merge request that was created. The merge request is really the key to using GitLab as a code collaboration and [version control platform](/topics/version-control/). It’s simply a request to merge one branch into another.

![merge requests](/images/blogimages/CI_demo_blog_May_28/CI_demo_9.png){: .shadow.medium.center}

Merge requests for this project
{: .note.text-center}

[Review Apps](/stages-devops-lifecycle/review-apps/) are a way to visualize the changes that were made. Click `View app` once the pipeline has completed to access the staging environment.

![Review apps](/images/blogimages/CI_demo_blog_May_28/CI_demo_10.png){: .shadow.medium.center}

Select `View app` to access a staging environment once a pipeline completes.
{: .note.text-center}

In this environment, only changes that were made in the merge request will be displayed. This link can be sent to others so they can view the changes from a web browser.

![staging environment](/images/blogimages/CI_demo_blog_May_28/CI_demo_12.png){: .shadow.medium.center}

The Review App for this project
{: .note.text-center}

From the merge request, you can see the test results, including changes to code quality and the security scans. This scan detected 20 new vulnerabilities. If you’d like more information, just click `Expand` on the right.

![pipeline test results](/images/blogimages/CI_demo_blog_May_28/CI_demo_13.png){: .shadow.medium.center}

Pipeline test results
{: .note.text-center}

Once the results have been expanded, you can click on each one to get more details.

![SAST scan](/images/blogimages/CI_demo_blog_May_28/CI_demo_14.png){: .shadow.medium.center}

SAST vulnerabilities detected
{: .note.text-center}

By clicking on one of these results, you can see the file that caused the vulnerability as well as the problematic lines of code.

![security report](/images/blogimages/CI_demo_blog_May_28/CI_demo_15.png){: .shadow.medium.center}

Security report
{: .note.text-center}

From this menu, you can choose to dismiss the vulnerability or create an issue so that someone can fix it. Details from the test will be added to the issue automatically.

![new issue](/images/blogimages/CI_demo_blog_May_28/CI_demo_16.png){: .shadow.medium.center}

A new issue created to investigate a vulnerability
{: .note.text-center}

From your original merge request, you can collaborate with others and have them take a look at the proposed changes.

![collaborate on merge request](/images/blogimages/CI_demo_blog_May_28/CI_demo_17.png){: .shadow.medium.center}

Tag someone in a merge request to have them see your changes
{: .note.text-center}

Once you’ve gathered feedback and all pipelines have passed, click the `merge` button to trigger a new pipeline to deploy your application to production

![Web IDE](/images/blogimages/CI_demo_blog_May_28/CI_demo_18.png){: .shadow.medium.center}

Click `merge` to trigger a deployment pipeline
{: .note.text-center}

This workflow shows how anyone can contribute code without using a command line. The Web IDE makes it easy for anyone to make changes without introducing additional risks or quality issues, all from the GitLab interface.

To see this three-minute demo in real-time, just watch the video below.

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube-nocookie.com/embed/6207TKNGgJs" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->
