---
title: "3 CI/CD challenges to consider"
author: Chrissie Buchanan
author_gitlab: cbuchanan
author_twitter: gitlab
categories: insights
image_title: '/images/blogimages/modernize-cicd.jpg'
description: "If these DevOps challenges hit close to home, the right CI/CD could be the answer."
tags: DevOps, CI/CD, workflow
cta_button_text: 'Explore GitLab CI/CD'
cta_button_link: '/features/continuous-integration/'
twitter_text: "Do these DevOps challenges hit too close to home? CI/CD to the rescue"
postType: content marketing
merch_banner: merch_two
merch_sidebar: merch_two
---

[Continuous integration and delivery](/features/continuous-integration/) helps DevOps teams ship higher quality software, faster. But is all [CI/CD](/topics/ci-cd/) created equal? What does successful CI/CD implementation look like and how do you know you’re on the right track?

In this four-part series, we talk about modernizing your CI/CD: Challenges, impact, outcomes, and solutions. Today, we’ll focus on [DevOps](/topics/devops/) challenges and situations where a comprehensive CI/CD approach could be the answer you’ve been looking for.

If these problems hit a little too close to home, stay tuned for part two where we dive deeper into how these roadblocks impact the rest of the SDLC.


## What challenges do I face?



### 1. Maintenance and integration costs, predominantly human resources costs.

A large percentage of the overall IT budget goes to support teams of engineers needed to integrate and maintain a complex toolchain. An enterprise company with 1,000 developers could need up to 40 engineers just to maintain the DevOps toolchain instead of allocating these resources towards delivering business value.


### 2. Development is slowed/blocked by the operations team.

The quintessential challenge of the pre-DevOps world is that dev teams are incentivized to increase innovation velocity by shipping new features. Operations teams are incentivized for stability, uptime, and error reduction. The higher the development velocity, the greater the chance for downtime and errors – so these teams are naturally at odds with each other. Dev leaders don’t always have enough enticing evidence or incentive to go to the Ops team to advocate for increased deployment velocity, and vice versa.


### 3. Developers doing ops.

Today, teams and individual developers base the code they produce on the capabilities of their environment rather than the needs of the business.


## What do these look like in practice?


### A big portion of resources and budget goes to undifferentiated integration and maintenance.

Teams are siloed by their tools – each team has their favorite and is optimized to work within these specialized tools only. It is difficult to collaborate and troubleshoot across the stack due to a lack of visibility.


### Code sometimes never gets to production at all.

There is a delay between code being written and driving value. When problems or errors arise and need to be sent back to the developer, it becomes difficult to troubleshoot because the code isn’t fresh in their mind (context switching). They have to stop working on their current project and go back to the previous code to troubleshoot. So much time might have passed that the code is no longer deployable in its current state. In addition to wasting time and money, this is demoralizing for the developer who doesn’t get to see the fruit of their labor.


### Developers worry about environments, not business logic.

Environment dependencies and configuration distracts developers from tasks they’re better equipped to handle. They may even be spending time trying to decide what size VM they need to deploy to. In this order “DevOps” means “Developers have to do both dev and ops.” Only a small percentage of developers actually enjoy this arrangement with most asking, “I’m a developer, please stop asking me to do operations.”

If you’ve already implemented CI/CD but are still experiencing these roadblocks, it might be time to modernize your CI/CD. We invite you to compare GitLab CI/CD to other CI tools and see why we were rated #1 in the Forrester CI Wave™.

[Explore GitLab CI/CD](/features/continuous-integration/)
{: .alert .alert-gitlab-purple .text-center}

Photo by [Jungwoo Hong](https://unsplash.com/photos/cYUMaCqMYvI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/search/photos/arrow?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
{: .note}

<%= partial "includes/blog/blog-merch-banner" %>

