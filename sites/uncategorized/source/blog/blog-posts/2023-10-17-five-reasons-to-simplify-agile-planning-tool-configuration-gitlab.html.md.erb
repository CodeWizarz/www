---
title: "5 reasons to simplify your Agile planning tool configuration with GitLab"
author: Melissa Ushakov
author_gitlab: mushakov
author_twitter: gitlab
categories: devops platform
image_title: /images/blogimages/agile.png # new image coming from design
description: "Get more from your Agile planning with a platform that supports automation, protects the user experience, and reduces time spent on tool configurations."
tags: agile, DevSecOps platform, DevSecOps, product
twitter_text: "Get more from your Agile planning with a platform that supports automation, protects the user experience, and reduces time spent on tool configurations."
featured: yes
guest: false
postType: product
related_posts:
  - "/blog/2023/09/26/atlassian-server-ending-move-to-a-single-devsecops-platform/"
---
_Atlassian is ending support for all Server products in February 2024. [Learn more about the benefits of migrating from Atlassian to GitLab here](https://about.gitlab.com/move-to-gitlab-from-atlassian/)._

Agile planning tools offer an opportunity to guide team members through a workflow and to follow best practices. In some Agile planning tools, like Atlassian Jira, this is done by configuring enforced status workflows for Agile planning work items. However, enforced status workflows can slow response times, impact team autonomy, and have other negative effects. Instead, let's explore how a single DevSecOps platform with built-in Agile tooling can simplify the process — and how GitLab can help.

## What are enforced status workflows?
Enforced status workflows define the statuses a work item can be in, the allowed status transitions, the data elements needed to perform a status transition, and which users can perform a status transition. In a typical Jira-user scenario, developers have to manually fill in required data and advance an item through a prescribed status workflow that may not account for exceptions. Enforced workflows in an Agile planning tool can limit creativity and unnecessarily block progress when exceptions are encountered, hindering the team's ability to respond swiftly to changing priorities and limiting their autonomy in delivering the best business outcomes.

![status workflows](/images/blogimages/2023-09-26-say-no-to-complex-status-enforcements-in-your-agile-planning-tool/status_workflow_example.png){: .shadow.small.center}
Example of an enforced workflow preventing certain status transitions
{: .note.text-center}


## Guiding users through a workflow with GitLab
Here are five ways GitLab simplifies your Agile planning tool configuration.

### 1. Statuses are enforced close to the work for better efficiency.
Compliance and security checks are necessary, and organizations should ensure that work goes through the proper reviews and that the right team members are involved. Agile planning work items are an artifact that helps align the scope of work of a deliverable, and the work to make that scope a reality happens in downstream in merge requests. Many times, enforcements are better suited to be applied through [approval rules](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/rules.html), [compliance pipelines](https://docs.gitlab.com/ee/user/group/compliance_frameworks.html#compliance-pipelines), or [deployment approvals](https://docs.gitlab.com/ee/ci/environments/deployment_approvals.html). This leads to a greater assurance that the code changes have followed the right process, which matters most. For example, instead of having an enforced status transition in your work items for a security review, you can create [merge request approval rules](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/rules.html), setting the members of your security team as approvers. [Deployment approvals](https://docs.gitlab.com/ee/ci/environments/deployment_approvals.html) can be set up so that your quality assurance lead needs to approve the deployment to specific environments.

![status workflows](/images/blogimages/2023-09-26-say-no-to-complex-status-enforcements-in-your-agile-planning-tool/unified_approval_rules_v16_0.png){: .shadow.small.center}
The production environment requires five total approvals, and allows deployments from only the "Very Important Group" and the user administrator.
{: .note.text-center}


### 2. Automation improves data quality.
This may seem counterintuitive, but when you place too many restrictions on what data entry is allowed, people stop updating their work items, leading to poor data quality. Working through exceptions to the process is cumbersome, and users need to misreport activity to close the work item when work is done. For example, it's common for users in a tool with workflow enforcements to quickly advance an issue through statuses that didn’t happen so that it could be closed when work has been completed. What if you could intelligently derive the status of work instead of relying on people updating issues? With [GitLab triage](https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage), automation can add or remove labels, set a health status based on downstream DevOps activity, and more. Your developers can spend more time on product innovation and driving your business objectives forward instead of manually updating details, which automation can handle. 

![bot labels](/images/blogimages/2023-09-26-say-no-to-complex-status-enforcements-in-your-agile-planning-tool/gitlab_bot_health.png){: .shadow.medium.center}
Update health with automation
{: .note.text-center}


![bot health](/images/blogimages/2023-09-26-say-no-to-complex-status-enforcements-in-your-agile-planning-tool/gitlab_bot_labels.png){: .shadow.medium.center}
Update labels with automation
{: .note.text-center}


### 3. The user experience is protected.
At GitLab, we prioritize [convention over configuration](https://about.gitlab.com/handbook/product/product-principles/#convention-over-configuration) as one of our product principles to deliver exceptional user experiences. This is why GitLab avoids using heavy-handed enforced status workflows in Agile planning tools, which end users often dislike. These workflows create friction and hinder your team's productivity. Instead, teams should encourage transparency by explaining the importance of each step in the process, fostering understanding and buy-in. GitLab enables teams to represent a status flow with boards that help to understand the intended flow. A simplified planning tool setup within the DevSecOps platform drives collaboration, transparency, and trust across all roles, leading to a better full-team experience where developers can deliver more value faster.

![workflow board](/images/blogimages/2023-09-26-say-no-to-complex-status-enforcements-in-your-agile-planning-tool/workflow_board.png){: .shadow.medium.center}
Boards guide your team through a sequence of statuses
{: .note.text-center}


### 4. Developer tool integration is simplified.
Organizations often have a rich ecosystem of tools, and the inability to fully integrate with a critical tool like your Agile planning solution limits efficiency and flexibility, potentially leading to time-consuming manual processes. When your status process flow is too restrictive, it is almost impossible to update data from an integration accurately, leading to data mismatches between systems. Other vendors, like Atlassian, have resorted to advising against updating data via an integration. At GitLab, we embrace developer tool preferences and have a comprehensive [suite of APIs and webhooks](https://docs.gitlab.com/ee/api/).

### 5. Time spent on tool configuration is reduced.
Agile planning tools require close management of configurations. The more prescriptive you make workflows, the more time you have to spend tending to those configurations. With GitLab, automated workflow controls require less effort and enable greater team autonomy. By embracing GitLab's flexible configuration options, teams can spend less time on Agile planning tool management and innovate more efficiently. 

## Getting started with GitLab
With a simplified Agile planning tool setup in GitLab that takes advantages of modern DevSecOps practices, you can increase efficiency, encourage collaboration, and get to market faster – all while improving the developer experience.

Get started today with the [Jira importer](https://docs.gitlab.com/ee/user/project/import/jira.html).
