---
title: "How to use DevOps to pay off your technical debt"
window_title: "What is Technical Debt and how DevOps can help | GitLab"
author: Sara Kassabian
author_gitlab: skassabian
author_twitter: gitlab
categories: insights
image_title: '/images/blogimages/greenery.jpg'
description: "Technical debt is a universal problem with an equally universal solution – DevOps. Here's how DevOps can reduce the tech debt burden and help you deploy faster and more frequently."
tags: inside GitLab, agile, DevOps, CI/CD
twitter_text: "Got technical debt? You aren't the only one, learn how switching to @gitlab for DevOps can help"
featured: no
postType: content marketing
merch_banner: merch_eight
---

One of the primary resource constraints in the [DevOps](/topics/devops/) world is technical debt. Technical debt is a metaphor created by Ward Cunningham that compares the build-up of cruft (deficiencies in the internal quality of software systems) to the accumulation of financial debt, where the effort it takes to add new features is the interest paid on the debt, writes [Martin Fowler](https://martinfowler.com/bliki/TechnicalDebt.html).

It’s common for a busy developer to write code with known imperfections, but because the priority is to ship new features as quickly as possible, deliverables are often prioritized over correcting the inefficiencies in the process.

One of the major dilemmas with determining the value of spending precious time fixing cruft versus building new features is that the costs are not objectively measurable, says Fowler. Just like with paying off financial debt, the right call is largely circumstantial as opposed to absolute.

"Given this, usually the best route is to do what we usually do with financial debts, pay the principal off gradually," writes Fowler.

By cleaning up some of the cruft as you work on the new features, you ensure that the most relevant code is tidier for future iterations. When it comes to crufty, but stable, code, you can leave it alone. This method is similar to paying the monthly balance on a low interest rate loan – the impact is minimal.

 "In contrast, areas of high activity need a zero-tolerance attitude to cruft, because the interest payments are cripplingly high," writes Fowler.

One way to start dealing with technical debt is to conduct a rough audit and triage your technical debt by "interest rate" – high interest rate cruft is addressed with the same priority as shipping new features, while medium-to-low interest rate cruft can be dealt with in a ratio that best suits your team’s situation, because dealing with your most urgent technical debt sooner rather than later will help you save resources in the long-term.

## How tech debt accumulates in your workflow

It’s not just code that contains cruft. A lot of the time, we have cruft that slows down our engineering processes. When it comes to investing time and money into updating DevOps processes, it seems there is never enough of either resource.

"We don’t let our teams spend time on improving their process because we think it’s wasted effort," says [Brendan O’Leary](/company/team/#brendan), senior developer evangelist at GitLab. "But if you can spend a day fixing some things that make your workflow inefficient, and you save an hour a week from now until eternity, that’s a big difference."

Take for instance manual deployment versus the use of automated pipelines. We know that deploying manually takes an enormous amount of time, but the upfront cost of allocating time to building automated pipelines can seem daunting.

If your team is trapped in a time-consuming cycle of technical debt, take a peek at how Minnesota-based consulting firm, [BI Worldwide](/customers/bi_worldwide/) (BIW), was able to accelerate deployments by transitioning to GitLab. In the case study, the BIW Corporate Products Development Team explains how they were stuck in a rut of manual testing and manual deployments on their on-prem infrastructure. Their toolchains were complex and inefficient, which created a dense backlog.

"It was entirely time-consuming to apply all of those code changes," said Adam Dehnel, product architect, BIW, in the case study. As a result, deployments were infrequent and slow as too many features were crammed into each release.

The first step to increase the speed of their deployments was to update and modernize their processes.

"[BIW] had practices and tools in place at the time but were spending time on items that weren’t business differentiating features. They faced classic issues surrounding a lack of cross-team communication including inefficient mechanisms for intra-organization workflows and individualized toolsets."

First, BIW made the painful transition from CVS to Git. Next, the company aimed to automate the build, test, and deployment process and built a toolchain with tools such as GitHub, Jenkins, JIRA, and Confluence.

For BIW, this complex toolchain was buggy. One thing that was not mentioned in this specific use case, but still merits recognition, is the hidden cost of maintaining all of these different tools.

"The argument to be made there is not only is it cost of using these various tools, but also that the more tools you have, there is the overhead cost of upgrading them, maintaining them, and integrating them," says Brendan. "There’s a massive hidden cost behind the cost of doing business."

In the next iteration, BIW embraced the efficiency of an all-in-one tool by transitioning to GitLab.

BIW went from a pre-Git pace of shipping a release every nine to 12 months to deploying nearly ten times a day using GitLab Ultimate, no doubt putting a serious dent in the technical debt that followed their slower, laborious release cycle.

## Conserve valuable resources and pay off technical debt with DevOps

In a previous blog post, we examined [communication strategies to get non-technical stakeholders to buy-in to DevOps](/blog/2020/09/24/devops-stakeholder-buyin/). DevOps can help you deploy faster and more frequently, giving your business an edge over the competition, but it is also a strategy for paying off your technical debt. By first taking into account inefficiencies in your code and engineering processes, you can make a rough triage of your team's technical debt. This type of audit is the first step to identifying cruft you can trim to help speed up your cycle time, clear your backlog, and modernize your engineering processes.

## Read more

- [Need DevOps buy-in? Here's how to convince stakeholders](/blog/2020/09/24/devops-stakeholder-buyin/)
- [A guide to cloud native storage for beginners](/blog/2020/09/10/cloud-native-storage-beginners/)
- [Want to iterate faster? Choose boring solutions](/blog/2020/08/18/boring-solutions-faster-iteration/)

Cover Photo by [Vadim L](https://unsplash.com/@sk3tch?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/plants?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
