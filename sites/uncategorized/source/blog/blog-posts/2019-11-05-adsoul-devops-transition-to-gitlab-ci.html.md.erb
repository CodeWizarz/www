---
title: How adSoul transitioned to GitLab CI from Jenkins
author: Brein Matturro	
author_gitlab: bmatturro
author_twitter: bnmatturro
categories: engineering
image_title: /images/blogimages/londoncommit.png
description: adSoul, a marketing automation company, outlines a successful three-phase migration plan for moving to GitLab CI from Jenkins.
tags: CI/CD, DevOps, open source, performance, startups, london-2019
merch_banner: merch_two
merch_sidebar: merch_two
twitter_text: "How @adSoul successfully migrated to @gitlab from Jenkins" 
featured: yes #
---
 
adSoul is a Germany-based data-driven online marketing company that aims to improve search engine advertising and scalability for businesses. The core of adSoul relies heavily on API interfaces and entity recognition to post keywords on Google and Bing with marketing automation. 

At GitLab Commit London, [Philipp Westphalen](https://www.linkedin.com/in/philipp-westphalen-a83318188/), fullstack developer at adSoul and GitLab Hero, shares how the company transitioned from Jenkins to GiLab CI. adSoul is a startup company with five developers, and as Philipp says “We literally have no time for everything we need to do.” They were looking for a tool that requires less time-consuming maintanence, and with Jenkins the team found it hard to read their existing files. “Our Jenkins was not so stable at all and it was tough to change because it was managed by our provider,” Philipp says. Cost and visibility were also huge motivators in moving away from [Jenkins to Gitlab CI](/blog/2017/07/27/docker-my-precious/).

## GitLab migration in three phases

Phase 1: Move the repository.
The [adSoul team](https://www.adsoul.com) used the GitHub Import by GitLab, but had setbacks with migrating their issues, so they created a GitHub open source issue migrator as a resolution. Following that, they modified scripts with the new origin by exchanging the GitHub API call with a GitLab API. “This was really easy and we had a stable build with our new repository, so we could move our product management to GitLab and not need GitHub anymore,” Philipp says.

Phase 2: Migrate the CI/CD pipeline.
The team started to create a GitLab CI YAML and tried to do a simple ‘lift and shift,’ however their processes were more complicated than anticipated. Though this phase was time consuming, it became clear the team could move to phase three without hiccups. “Quick pro tip,” says Philipp. “If you’re running your own GitLab runners, increase the log limit if you have to debug your building step.” 

Phase 3: Improve the CI/CD pipeline.
The team thought about ways of building their software, so they split projects into steps. “Our idea was that one job does one thing perfectly. Each job is simple and everyone can modify it easily” Philipp says. They improved their build time by moving to Gradle, created parallel job processing, and by using standard Docker images for ease of management. 

## Takeaways from a successful migration

1. Plan your migration. Get every member of the team involved and aware of the upcoming changes, including how tools are working together and what the expectations are moving forward. “Take your time for the migration,” Philipp says. “It’s not two days and then we are finished.” 

2. Go step by step. adSoul used a three phase plan which allowed the team to deploy a new version and still continue to work on existing projects. “We could improve our application without having to wait for a better infrastructure,” Philipp says.

3. Rethink your [DevOps strategy](/blog/2019/10/18/better-devops-with-gitlab-ci-cd/). In the time leading up to the migration, examine things like security automation and other important pieces in a DevOps overall strategy.

4. Start with a small project. Work closely with colleagues to create small GitLab CI projects to familiarize everyone before creating larger, overwhelming projects.

Pro tip: Keep your pipeline user friendly. Create a good user experience for the team with clear job names, style your config for a better overview, and write comments for variables and hard to understand code. 

## Why GitLab works for a small team

“The most important thing is that GitLab is a powerful CI/CD solution with high customization,” Philipp says. There is one home for all projects, without dependencies on one another. With Jenkins, even small exploratory changes can impact the larger job. “With GitLab, you don’t have dependency between branches. So, if you’re trying something new for your CI, you can do it simply in your branch and the master branch will not be affected by the changes,” Philipp says.

The CI is low maintenance, which is a useful timesaver for a smaller team. “The CI provides us with really low maintenance time. So, usually we don’t have to care about our CI for a month or more,” Philipp says.

To learn more about adSoul’s migration to GitLab, watch Philipp’s talk from GitLab Commit London.

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/C5xfw0ydh2k" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

<%= partial "includes/blog/blog-merch-banner" %>

