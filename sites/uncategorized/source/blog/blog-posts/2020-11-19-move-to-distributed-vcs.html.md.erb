---
title: "Why you should move from centralized version control to distributed version control"
window_title: "Centralized vs Distributed Version Control System - Which to Choose?"
author: "Suri Patel"
author_gitlab: suripatel
author_twitter: suri__patel
categories: insights
image_title: '/images/blogimages/distributedvcs.jpg'
description: "We share a few reasons why high-performing software development teams use distributed version control systems over centralized version control."
tags: git, workflow, collaboration
twitter_text: "Using a centralized version control system? It’s time to switch to distributed"
featured: no
postType: content marketing
related_posts:
  - "/blog/2020/03/13/partial-clone-for-massive-repositories/"
  - "/blog/2020/04/20/ultimate-git-guide/"
  - "/blog/2020/04/07/15-git-tips-improve-workflow"
merch_banner: merch_seven
---

Distributed version control has the power to increase collaboration and streamline development, but many teams are still using a centralized [version control system](/topics/version-control/) that prevents them from reaching their full development potential. If your team uses a centralized version control system, velocity, code quality, and collaboration aren’t at the same levels of high-performing teams that consistently deliver valuable products at rapid speeds. Using a [version control](/topics/version-control/) system isn’t enough to stay competitive in today’s market - you have to use the best tools available.

## What is version control?

Version control lets software development teams build up communication and collaboration while continuously making and tracking changes to source code. Sometimes called code revision control, version control exists as a safety net to protect the source code while giving the development team the flexibility to experiment without worrying about causing damage or creating code conflicts. A version control system can be local, centralized, or distributed based on organizational needs.

## Centralized version control: A relic from the past

A centralized version control system relies on a central server where developers commit changes. Users like centralized systems, because they’re simple to set up and provide admins with workflow controls. Centralized vcs, like Subversion, CVS, and Perforce, solve the age-old problem of manually storing multiple copies on a hard drive, but the few benefits don’t outweigh what’s at risk from relying on a [single server](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).

If the only copy of a project becomes corrupted or goes down, developers are unable to access the code or retrieve previous versions. Also, remote commits are extremely slow, because users must commit through a network to the central repository, which can slow down systems. Users must also be in network to push changes, limiting where and when developers can commit. Merging and branching are also difficult and confusing, since contributors have to track merges and branch as a single check-in.

## Distributed version control: The key to rapid software development

Unlike a centralized version control system, a distributed version control doesn’t have a single point of failure, because developers clone repositories on their distributed version control workstations, creating multiple backup copies. If the [source code](/stages-devops-lifecycle/source-code-management/) is corrupted, teams can use any developer’s clone as a backup, increasing security since there’s little risk of losing a project’s entire history. 

Also, because there are local copies, developers can commit offline, which offers flexibility in their personal workflow and prevents having to commit as a giant changeset. Distributed version control, such as Git, Bazaar, and Mercurial, offers fast [branching](/topics/version-control/what-is-git-workflow/), because there’s no communication with a remote server - everything is done on a local drive.

Are you ready for a quick look at Git, the most popular distributed version control system? [Brendan O’Leary](/company/team/#brendan), senior developer evangelist, explains Git basics to help teams get started in the video below.

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube-nocookie.com/embed/9oDNBuive-g" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

The biggest challenge to switching to a distributed version control system is the learning curve. Teams will be able to ship higher quality code at new speeds using a distributed version control.

## Core benefits of a distributed version control system

A [distributed version control system](/topics/version-control/benefits-distributed-version-control-system/) is like each team member having a second set of hands to catch problems, introduce fast fixes, and execute fast merging with fewer conflicts. Additionally, it makes the collaboration process hyper-efficient, thereby letting [DevOps](https://about.gitlab.com/topics/devops/) teams work asynchronously. Version control empowers teams to collaborate and streamline software development to resolve pain points and create a centralized location for code.

## Popular distributed version control systems (e.g. Git)

The three most well-known options are Git, SVN, and Mercurial. The most popular of these options is Git, which is an open-source distributed system that is used for any size software project. 

Git offers tons of features and benefits, including:

* Strong support for non-linear development.

* Works with popular protocols/systems including HTTP, FTP, and SSH.

* Offers GIT GUI, which allows for fast re-scan, state change, sign off, commit & push the code quickly with low friction.

* It can handle any size project.

* Can function across platforms.

* Toolkit-based design.

* Rapid and efficient performance.

* Code changes are easily tracked and managed.

When choosing a version control system, make sure to evaluate all options to find the best fit for your team.

Cover image by [Hans-Peter Gauster](https://unsplash.com/@sloppyperfectionist?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/3y1zF4hIPCg)
{: .note}
