---
title: "Cube reduces toolchain complexity and speeds software delivery with GitLab"
categories: devops platform
tags: DevSecOps, customers, CI, CD
description: Software maker shares how the DevSecOps Platform helps improve customer collaboration and streamline releases.
image_title: '/images/blogimages/faster-cycle-times.jpg'
featured: yes
twitter_text: "Software company Cube is using gitlab CI/CD and Agile
  capabilities to deliver customer value, faster"
---
Six years ago, [Cube](https://cube.nl/), a software development company based in the Netherlands, struggled with a fragmented and siloed toolchain. The company also wanted a comprehensive solution that would pull together development, security, and operations teams and create a single source of truth for better collaboration with their customers. So they opted for GitLab’s DevSecOps Platform.

Operations Manager Mans Booijink and Lead Developer Remi Buijvoets sat down with GitLab to share how moving to an all-in-one DevSecOps platform has made a significant and positive difference at Cube – internally and with customers – and why they are happy with the move.

Before diving into their migration story, here's a snapshot of the improvements Cube has achieved with GitLab:

- Improved [CI/CD](/topics/ci-cd/) delivery speed	
- Improved service-level agreement (SLA) response time
- 80% of Cube clients are actively working in GitLab
- Single source of truth collaboration

![image of Mans Booijink](/images/blogimages/MansBooijinkCube.jpg) | ![image of Remi Buijvoets](/images/blogimages/RemiBuijvoetsCube.jpg)
Mans Booijink | Remi Buijvoets

**Why did Cube make the switch to GitLab?**

Before making the switch, we used a combination of Bitbucket, Trello, and Jira. The combination caused a [fragmented, siloed toolchain](/blog/2022/06/21/battling-toolchain-technical-debt/). There were a lot of opportunities for improving efficiency. So we started using GitLab because we wanted a DevOps system that includes ticket management, security, and customer collaboration. Not only does GitLab operate efficiently, but adoption is also fast and easy. In fact, we tripled our GitLab user base from 20 to nearly 70 in the past three years. Now almost the entire Cube organization uses GitLab. Our clients and colleagues (designers, developers, and project managers) can communicate easily by working in the same GitLab environment. 

**Did Cube try anything else before GitLab?**

We tried out other tools before moving to GitLab. But GitLab offered everything we needed – ticket management, CI/CD, DevOps, versioning, file management, and security. It didn’t take long to realize that GitLab was perfect because we wanted to have one tool where we all work together with our clients and team.

**Now that Cube uses GitLab, how has your toolchain changed?**

GitLab has simplified everything into a single source of truth. We deploy to a private cloud in the Netherlands, and we integrated Sentry into GitLab for error monitoring. Still, otherwise, everything we do is in GitLab.

**How has GitLab CI/CD helped Cube?**

GitLab CI helps us automate the software development process by using GitLab pipelines and a runner to deploy our code. Within the pipelines, we run linters to check code quality. Also, Unit and functional tests are executed to ensure the functioning of the application. When an error occurs or when a test fails, the pipeline will fail. GitLab CI adds value to our software development lifecycle because it prevents bugs from being deployed and helps deploy features while other features are still in development. In addition, it helps us monitor our projects’ quality, which is essential.

GitLab CI surely helps in the speed of delivery, but also a lot in facilitating rollbacks when a release accidentally contains an error. We use a release schedule, and GitLab helps us to automate most of the work so that we can deliver right on time.

GitLab CD improves the speed of our code deployments. When the pipelines succeed, developers can ensure everything works as it should. As a result, developers can focus more on the development itself and don’t have to lose focus by giving thoughts on the deployment. We have also introduced a local machine that builds releases. The machine is hosted on-premises and has a lot of resources. Multiple GitLab Runners use this machine to build releases. Using the GitLab Runners with an on-premises computer was easy to configure.

**How have GitLab’s Agile capabilities helped your company become more efficient?**

Before GitLab, we used a variety of communication channels with our customers. Now GitLab gives us a central, accessible place for all communications. We also use [GitLab for Agile development](/solutions/agile-delivery/). We have our epics to manage bigger development projects, and we also utilize milestones. We do four to six releases weekly, and we all manage them by creating milestones that everyone can see, including the client and the development team. We provide all tickets with requirements, estimated time, when we intend to release it, who has to test it, etc. We use GitLab for 90% of our project management, Agile management, and working functionalities, which is proving very effective.

**How do you measure the success of your GitLab migration?**

We measure the lead time of delivery. The results of each separate phase in the delivery are accurately logged. This way we can demonstrate that we comply with the agreements made to our customers. We also keep track of how efficient the different phases during the development process are, and whether they improve compared to the past.

Because we use GitLab integrally throughout the process, it is a very valuable and useful source of information.

