---
title: "How GitLab 14 satisfies the need for speed with modern DevOps"
author: Parker Ennis
author_gitlab: parker_ennis
author_twitter: Parker_GitLab
categories: engineering
image_title: '/images/blogimages/racecar_devops.jpg'
description: "GitLab 14: Ship with velocity, ship with confidence"
tags: DevOps, inside GitLab, CI, CD, GitOps
guest: false
ee_cta: false
install_cta: false
twitter_text: "Learn how @GitLab 14 helps companies ship software with velocity without sacrificing quality"
featured: yes
postType: content marketing
related_posts:
  - "/blog/2021/07/20/are-you-ready-for-the-newest-era-of-devsecops/"
  - "/blog/2021/07/21/optimizing-devops-visibility-in-gitlab-14/"
  - "/releases/2021/06/22/gitlab-14-0-released/"
merch_banner: merch_eight
---

## How DevOps and NFS changed the game

What if I told you that one of the best-selling racing video game franchises of all time, the "Need For Speed" (NFS), and DevOps have more in common with each other than you think? Yes, you read that correctly, probably not the NFS (Network File System) you were expecting.

### An appetite for change

For context, the NFS series originally set out to redefine a saturated, yet unsophisticated, racing video game market. Motivated by an appetite for change, the NFS user experience reflected the human connection to real cars and how they behaved, which was a big challenge for developers in the 1990s. Nearly 30 years ago, "The Need for Speed" forever changed the landscape of racing games, selling 150 million copies since its debut.

![The original Need For Speed game from 1994](/images/blogimages/need_for_speed.png){: .shadow.center}
The original Need For Speed video game set a new standard with an appetite for industry change.
{: .note.text-center}

Coincidentally, it was in 1994 that Grady Booch coined the term "continuous integration" (CI). Booch, like NFS, paved the way for immense industry growth in the realm of software development. CI aimed to redefine the manual, time-consuming development processes that paid little mind to how real humans and developers behaved and collaborated around application development by [leveraging automation to increase development speed without sacrificing quality](/topics/ci-cd/benefits-continuous-integration/).

Similar to how NFS took the racing scene by storm and laid the groundwork for the racing game genre, CI evolved into what is arguably the most important piece of DevOps best practices today: Continuous integration and continuous delivery (CI/CD).

DevOps continues to evolve, but without CI/CD, DevOps isn't the collaborative practice that helps teams work faster and more efficiently. CI/CD is a super power within DevOps – unlocking the potential to ship apps with increased velocity and confidence in their quality, without having to choose one or the other.

### DIY DevOps vs Modern DevOps

Today, it doesn't matter what your business does, it's going to involve some amount of using and building software. DevOps gained traction in the age of digital transformation, where the rate of technical innovation acted as a forcing function for companies to fail or survive. Over the past 10 years or so, organizations had a choice to either embrace this "need for speed" and adopt DevOps practices, or be displaced by their competition.

This scramble led to a "DIY" style of DevOps that couldn't deliver on its promises much of the time. For many organizations, the biggest problem wasn't just the brittle toolchains composed of disparate pieces of software but also trying to make these complicated toolchains and processes benefit from DevOps. Since uprooting everything wasn't an option, the root of the problem was still there, and DevOps was hard to adopt.

For all the teams DevOps has helped, the DevOps marketplace must continuously improve and evolve as we learn more about the challenges of modernizing workflows. DevOps must modernize alongside businesses to ensure it's an accessible and realistic framework for as many companies as possible to leverage.

### GitLab 14 fuels the modern DevOps need for speed

With a platform-driven approach, [GitLab 14](/releases/2021/06/22/gitlab-14-0-released/) delivers a consistent and efficient developer and operator experience that leads to a simplified and more predictable SDLC. A single user interface, embedded security, and a unified data store are just some of the features of a platform any company can use without the tradeoffs of the DIY DevOps past. By using one tool for source code management, CI, and CD, teams are more efficient and productive with streamlined collaboration. Engineers are happier when focused on value-add than when maintaining integrations – and happy developers help attract and retain talent.

[GitLab 14](/gitlab-14/) ushers in a new era of modern DevOps as a global movement, and I'm excited to talk a little bit about some of its capabilities that help you ship software faster, with a higher degree of confidence, and improve your ability to respond to market changes.

### Ship with velocity and confidence

**1. [GitLab pipeline editor](/releases/2021/01/22/gitlab-13-8-released/#pipeline-editor)**

Crafting pipelines can be complicated and verbose without an understanding of advanced pipeline syntax and how it fits within the workflow using the '.gitlab-ci.yml' configuration file. Needing to craft pipelines from scratch presents a steeper learning curve for organizations and teams with a less mature DevOps culture. The GitLab pipeline editor lowers the barrier to entry for CI/CD novices and accelerates power users with visual authoring and versioning, continuous validation, and pipeline visualization. Whether you're a more advanced user or novice, the pipeline editor unlocks additional power and usability.

![Pipeline editor linting capability makes pipeline authoring easier](/images/blogimages/lint_ci.png){: .shadow.center}
Pipeline editor linting capability makes pipeline authoring easier and more efficient.
{: .note.text-center}

Here's what some of our wider community is saying about the pipeline editor:

> "I really like the direction of making CI/CD more accessible to first-time users and how GitLab rolls out this feature piece by piece." - Bernhard Knasmüller, computer scientist

> "This is going to improve the CI/CD configuration experience greatly!" - Olivier Jourdan, developer

**2. [GitLab Agent for Kubernetes](https://youtu.be/17O_ARVaRGo)**

The GitLab Agent for Kubernetes enables secure, cloud-native [GitOps](/solutions/gitops/). GitLab also meets customers where they are by supporting GitOps with agent-based and agentless approaches, and for deployments anywhere, regardless of whether infrastructure is cloud-native. It also enables alerts based on network policies for pull-based deployments.

Here's piece of feedback from the wider GitLab community on the Kubernetes Agent:

> "GitLab is leading the evolution of DevOps by optimising work efficiency and cloud-native integration capabilities. This enables the rapid delivery of digital value." - Vasanth Kandaswamy, Head of Data and Applications Portfolio, Fujitsu Australia

We look forward to iterating and improving these capabilities and always [welcome your feedback](/submit-feedback/#product-feedback) on our product.

### What's next?

One thing is for sure: **people want to go fast,** but not when it requires sacrificing peace of mind and quality. We're committed to helping you ship with velocity and confidence by [investing in specific product areas](/direction/#fy22-product-investment-themes) to bring the benefits of modern DevOps to anyone using GitLab to deliver their applications.

![Go fast with confidence](/images/blogimages/gofast.gif){: .shadow.center}
Even Ricky Bobby from Talledega Nights agrees. People just want to go fast!
{: .note.text-center}

We'll continue executing on our [vision for CI/CD](https://gitlab.com/groups/gitlab-org/-/epics/4534) to create a visual pipeline authoring experience built right into GitLab that simplifies the complexity, letting you quickly create and edit pipelines while still exposing advanced options when you need them.

We're also committed to making sure you can deploy anytime and anywhere to take advantage of the benefits of Kubernetes, no matter where you are at on your cloud native development journey. If you have feedback or suggestions on what we can do better, please [let us know in our product epic.](https://gitlab.com/groups/gitlab-org/-/epics/3329)

We look forward to delivering you more value as we iterate upon this new era of GitLab 14 going foward and can't wait to see the great things you're creating with Gitlab.

_This blog is part three in a three-part series on the top capabilities of GitLab 14. Learn more about [how GitLab 14 prepares you for DevSecOps 2.0 in part one](/blog/2021/07/20/are-you-ready-for-the-newest-era-of-devsecops/), and about [how to optimize DevOps with GitLab 14's enhanced visibility tools in part two](/blog/2021/07/21/optimizing-devops-visibility-in-gitlab-14/)._

Cover image by [CHUTTERSNAP](https://unsplash.com/@chuttersnapk) on [Unsplash](https://unsplash.com/photos/5Yo1P9ErikM)
{: .note}
