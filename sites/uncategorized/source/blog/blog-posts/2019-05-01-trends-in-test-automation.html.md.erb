---
title: "3 Trends in test automation"
window_title: "Latest Trends in Automation Testing | GitLab"
author: Chrissie Buchanan
author_gitlab: cbuchanan
author_twitter: gitlab
categories: insights
image_title: '/images/blogimages/trends-in-test-automation.jpg'
description: "Faster deployments, fewer bugs, better user experiences – see the latest trends in test automation and what they're bringing to the table."
tags: DevOps, CI/CD, workflow
cta_button_text: 'Just commit'
cta_button_link: '/blog/2019/03/27/application-modernization-best-practices/'
twitter_text: "Faster deployments, fewer bugs, better user experiences. Manual testing can't do that."
postType: content marketing
---

Automation is becoming a powerful tool in every industry.
With the pace of development at breakneck speed, [test automation](/topics/devops/devops-test-automation/) is a big asset in deploying applications quickly.
The volume and complexity of testing environments mean that machines are well-suited for the job, and a modern QA strategy is all about leveraging that automation effectively.

[QASymphony recently surveyed testers and QA leaders](https://www.qasymphony.com/blog/test-automation-trends-infographic/) at mid-size and large enterprises and found that a significant number of respondents expect to be making a big leap towards test automation in the next year:
Almost half expect to be automating more than 50 percent in that time.
The test automation tool landscape is growing more complex, and 83 percent of organizations are using open source tools.

## 1. Continuous testing

In traditional environments, testing gets completed at the end of a development cycle.
As more teams move toward a [DevOps](/topics/devops/) and [continuous delivery](/topics/ci-cd/) model in which software is constantly in development, leaving testing until the end can be a huge liability.
In the time between a project starting and going to testing, master files could have been changed thousands of times.
Who knows what kinds of bugs can pop up over months of development?
This leads to either updates stuck in testing for far too long or deployments filled with bugs – neither of which is good.
That’s where continuous testing comes in.

Continuous testing starts at the beginning.
Each milestone along the way serves as a quality gate, [baking in excellence at each stage of the software development process](https://techbeacon.com/app-dev-testing/state-test-automation-7-key-trends-watch).
As each phase clears, more testing happens as needed.
Implementing continuous testing methodologies is _already_ the biggest trend in test automation, but some organizations that embark on their DevOps journeys struggle with it.

Subu Baskaran, senior product manager for Sencha, says that despite the desire to test early in the cycle, software development teams that are still maintaining legacy applications find it hard to go back and write unit or end-to-end tests:

>"The millions of lines of code make it extremely difficult for teams to think about unit testing, as that will severely hamper new feature development. Also, legacy applications have inherent complexities that make end-to-end testing very slow, vague, and brittle. [Hence, teams that maintain legacy applications resort to manual testing.](https://techbeacon.com/app-dev-testing/state-continuous-testing-its-journey-not-destination)"

## 2. Concurrent DevOps

Code quality and speed go hand in hand, and teams must be able to make use of parallelization to keep up the pace.
Splitting work across multiple servers has never been easier, and organizations will continue to expand their concurrent DevOps approach.

You could have multiple physical machines to handle the load but [VMs can be a more economical option for automation parallelization](https://techbeacon.com/app-dev-testing/parallelizing-test-automation-read-first).
Whether those VMs are on premises or cloud-based largely depends on the cost and your company's ability to embrace the cloud.

You could also work with cloud partners, companies that host cloud-based execution environments
for testing and automation.

Autoscaling is one way that teams can reduce the costs associated with running these concurrent jobs.
[Autoscaling runners](/releases/2016/03/29/gitlab-runner-1-1-released/) split this work across multiple servers and spin up or down automatically to process queues – so developers don’t have to wait on builds and teams use as much capacity as needed.
This user [built out a CI testing pipeline using GitLab](https://medium.freecodecamp.org/4-steps-to-build-an-automated-testing-pipeline-with-gitlab-ci-24ccab95535e) that allowed for more effective bug catching, and more DevOps teams will be using these methods to automate their testing environments in years to come.

## 3. AI and machine learning

At its core, machine learning is a pattern-recognition technology, [the main purpose of which is to make machines learn without being explicitly programmed](https://hackernoon.com/why-ai-ml-will-shake-software-testing-up-in-2019-b3f86a30bcfa).
What makes this such an important trend in test automation is that it can make testing more predictive and reliable.
While Selenium is still the standard for creating testing scripts, it requires a high level of programming skill to maintain.
Automation tools like Mabl, [TestCraft](https://www.testcraft.io/), Testim.io, and AutonomiQ are just some of the few incorporating AI and machine learning into test automation.

Dan Belcher, co-founder of testing tool company Mabl, and his team [developed an ML testing algorithm that can adapt to changes in frontend elements](https://techbeacon.com/app-dev-testing/how-ai-changing-test-automation-5-examples).
"Although Selenium is the most broadly used framework, the challenge with it is that it's pretty rigidly tied to the specific elements on the front end. Because of this, script flakiness can often arise when you make what seems like a pretty innocent change to a UI." he explains.
"One of the things that we did at the very beginning of creating Mabl was to develop a much smarter way of referring to frontend elements in our test automation so that those types of changes don't actually break your tests."

AI and machine learning make it possible to go through millions of lines of code and identify patterns.
But what happens to the human testers? QA automation means that testers can devote more time to superior user experiences – the tasks that machines are _not_ always well-suited for.
The role of testers is now [ensuring that quality testing processes are being followed](https://www.qasymphony.com/blog/managing-testing-teams/), so it’s more about oversight than conducting actual tests.
Modern QA can be that bridge for beautiful user experiences that are intuitive and appealing.
With the volume of applications being deployed every day, having a great user experience is a way to stand out in a sea of apps.

## These trends in test automation are just the tip of the iceberg

There is no shortage of exciting things happening: more focus on JavaScript testing, improvements in testing across devices, comprehensive testing dashboards, as well as Selenium-free options.
The testing automation landscape is full of new solutions, but none of them is viable in an outdated legacy environment.

Manual testing reduces application development speed and threatens code quality.
These two disadvantages are growth killers, especially in such a competitive development landscape.
Test automation makes it possible for testers to use their skills where they add more business value: Creating great user experiences.
Legacy applications can’t tap into all of these test automation capabilities because they aren’t supported.
Organizations forced to manually test their code are being left in the dust by those who automate.

The advantage of using a solution like GitLab is that we can incorporate a variety of continuous testing solutions.
Customers have integrated us with SaaS-based testing solutions or even their own homegrown Selenium grids.
We also integrate with JavaScript platforms like Cypress.io, and help teams create continuous integration pipelines.

Are you ready to explore these trends in test automation but legacy applications are holding you back?

[Just commit.](/blog/2019/03/27/application-modernization-best-practices/)
{: .alert .alert-gitlab-purple .text-center}

Cover image by [Mimi Thian](https://unsplash.com/photos/ZKBzlifgkgw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/search/photos/%22developers%22?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
{: .note}
