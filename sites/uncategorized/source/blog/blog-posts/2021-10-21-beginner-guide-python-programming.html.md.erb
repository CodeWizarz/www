---
title: "How to get started with Python programming"
categories: devops platform 
image_title: '/images/blogimages/python.jpg' 
description: "Python is increasingly popular, and for good reason. Here's our beginner's guide."
tags: DevOps, careers, tutorial
twitter_text: "Learn the basics of Python with @gitlab's beginner's guide to Python programming" 
featured: no
postType: content marketing
---

Are you a programming enthusiast who wants to learn Python? Are you new to coding? Do you need help deciding where to begin with Python? If you are looking for answers to these questions, then you are in the right place.

## How to start writing code with Python

Python is an easy-to-learn, easy-to-use and easy-to-deploy programming language, with rampant usage in building web and desktop applications, analyzing data and performing [DevOps](https://about.gitlab.com/topics/devops/) tasks. It is a free, open-source, object-oriented coding language used to write simple scripts and complex programs. Of the almost 700 programming languages, Python is considered one of the best to learn first.

## Installing Python

Before discussing the basics of Python, it is essential to download and install Python on your desktop/laptop. Python works on multiple platforms, including Linux, Windows and Mac. It comes preinstalled on most Mac and Linux systems; however, you should download the latest version from the official Python website.

To check the current Python version on your system, open the command line and type “python -V”. 

![command prompt](/images/blogimages/python1.png){: .shadow}

If you have an outdated version, download either the 32- or 64-bit setup from the website based on your system requirements.

There are other alternatives for downloading the setup: for Windows, you can install it directly from Microsoft. For Linux, install it using the package manager. For macOS, you can download it from Homebrew.

Once the setup is downloaded, run the file installer, and click on “Install Now”. Once the installation is complete, you are ready to go. Below is an example of a Python installation for Windows.

![install Python](/images/blogimages/python2.png){: .shadow}

## Running Python in command prompt

To verify Python is installed and working correctly in Windows, open the command prompt and enter “python”, which will invoke the interpreter. You can directly execute Python codes in it.  For example, type “2*5+1” and press “enter”. You will see “11” as the output. Entering “quit ()” will exit the interpreter.

![Python interpreter](/images/blogimages/python3.png){: .shadow}

## Running Python in IDE

With the latest Python installed, you are now ready to start programming in Python. When writing long scripts or programs in Python, use Python’s built-in Integrated Development and Learning Environment (IDLE).

Start the IDLE and then, from the File dropdown, select “New File”, which opens a new editing window. So now, on your screen, you have two windows: a Python shell and an untitled file.

![Python shell and untitled file](/images/blogimages/python4.png){: .shadow}

The Python shell is a REPL environment, which is shorthand for "read-eval-print loop". It runs snippets of the code, usually one statement at a time. For example, by repeating the same calculation “2*5+1” that we did in the command prompt, you can see how a Python shell can function as a calculator.

![Python as a calculator](/images/blogimages/python5.png){: .shadow}

The untitled window is a text editing window for writing complete programs. The shell displays its output. For example, the conventional first program of Python for beginners is printing “Hello World!”. Make sure you save the text editor before running it by pressing “F5”.

![Hello World](/images/blogimages/python61.png){: .shadow}

## The basics of Python

We know you can’t wait to start writing long scripts for games and websites, but you still have a long way to get there. Just like with learning any other language, you must first understand the basics of Python. 

The **print()** function, as seen in the Hello World! example, prints a value on the output window. A value is the most basic thing a program uses. It can be a string, a numeric value or any other Python object. Any object within single/double quotations is called a string. For instance, the “Hello World!” that is printed in the above program is also of the type string. Numeric values like 4 and 4.5 are the types of integers and floats, respectively. You can change an integer or float into a string and vice versa using the built-in functions **int()**, **float()** and **str()**.

![value in an output window](/images/blogimages/python7.png){: .shadow}

## Python’s vocabulary

Python is the simplest coding language. It is easy to read and understand. Unlike human languages, Python has a small vocabulary or reserved words holding special meaning. Terms other than this reserved vocabulary hold meaning only to you and are called variables. These 35 reserved words are:

![Python terms](/images/blogimages/python8.png){: .shadow}

Make sure you use these words for their specified purpose to avoid confusing the Python interpreter and causing a syntax error.

### Naming variables

Sometimes you want to store values in your code for retrieving them later, which you can do by giving them symbolic names called variables. As seen below, we ask Python to store 5 and 6 with labels x and y, respectively, and then retrieve them later to find their sum.

![storing variables](/images/blogimages/python9.png){: .shadow}

There are rules for choosing a name for a variable; failing to follow these gives a syntax error. A few mandatory rules are narrated below:

1. The name can contain both letters and numbers, but it can’t start with a number.
1. An underscore can appear in the name to separate multiple words.
1. Special symbols like @#$ are illegal and should not appear in the name.
1. Python keywords should not be used as names for variables.

### Understanding operators and operands

Python uses special symbols called “operators” for representing basic mathematical computation. The values to which these operators are applied are called operands. The symbols used as operators for subtraction, addition, division, multiplication and exponentiation are  -,+, /, * and **, respectively. 

![symbols for operators](/images/blogimages/python10.png){: .shadow}

The modulus operator (%) outputs the remainder of the first operand divided by the second operand. It is useful in checking whether a number is divisible by another and extracting the rightmost digit/digits of a number.

![modulus operator](/images/blogimages/python11.png){: .shadow}

### Using expressions

A combination of values, variables and operators is called an expression. An expression typed in the shell gets evaluated, and the answer is displayed. However, in a script, an expression doesn't do anything on its own.

Python uses the mathematical convention PEMDAS for the operators, which means that P for Parentheses has the highest precedence, then Exponentiation, Multiplication and Division, which have the same priority. Addition and Subtraction come next and also have the same precedence. Operators that have the same preference are also evaluated from left to right.

![PEMDAS](/images/blogimages/python12.png){: .shadow}

The Addition and Multiplication operators also work with strings for concatenation and repeating a string, respectively.

![addition and multiplication operators](/images/blogimages/python13.png){: .shadow}

Python also allows you to take the value for a variable from the user via their keyboard. This can be done using a built-in function called **input**.

![input](/images/blogimages/python14.png){: .shadow}

## Write your first program

Now it's time to write a short program using everything you've learned here. Write a script that takes two numbers as input and adds them. Do this on your own and see the code below to tally your work.

![write a short program](/images/blogimages/python15.png){: .shadow}

**Congratulations!** You just wrote your first program.

Learning Python is easy and fun. We just helped you make it through the basics. To become a professional Python Programmer, you still have a lot to learn and practice. Good luck on your journey to becoming an expert coder.

Photo by <a href="https://unsplash.com/@davidclode?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">David Clode</a> on <a href="https://unsplash.com/s/photos/python?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
  




