---
author: Rebecca Dodd
featured: yes
title: "3 Debugging tips we learned from you"
author_gitlab: rebecca
author_twitter: gitlab
twitter_image: '/images/blogimages/rubber-duckies.jpg'
tags: community
postType: content marketing
categories: engineering
description: "We asked for your most unexpected causes of bugs. Here's what we learned."
ee_cta: false
related_posts:
  - /blog/2021/02/03/how-we-automatically-fixed-hundreds-of-ruby-2-7-deprecation-warnings/
  - /blog/2021/01/27/we-need-to-talk-no-proxy/
  - /blog/2018/11/14/how-we-spent-two-weeks-hunting-an-nfs-bug/
---

Infuriating, facepalm-inducing, but with an intensely satisfying payoff when (if!) you figure them out, bugs are an unavoidable part of being a developer.

![Programmer debugging meme](/images/blogimages/debugging.png){: .medium.center}
<!-- image: https://www.reddit.com/r/ProgrammerHumor/comments/m2wy7v/20_goto_10/-->

When senior developer evangelist [Brendan O'Leary](/company/team/#brendan) shared with us this amusing [story about a "bug" he solved](https://boleary.dev/blog/2021-01-27-the-purse-caper-debugging-can-be-hard.html) in a previous role, we knew we had to ask you about your most elusive bugs. Now we're sharing some of the best bug stories with you, along with some lessons.

Brendan's example was in fact not a bug at all, but actually the result of an employee resting their purse on the keyboard. This is the first lesson:¬†

## Debugging tip 1: It might not be a bug at all

A surprising number of "bugs" actually have nothing to do with code. One of the first principles of debugging is to reproduce the bug to get started. If you can't do that, it could be a sign that, er, human factors are at play. Consider this example from [@MrSimonEmms](https://twitter.com/MrSimonEmms) on Twitter:

> I once spent an entire day chasing down an error because I put a backtick in ‚Äì originally, I thought it was a piece of dirt on my screen.
(This was 15+ years ago and the stacktrace wasn't even erroring in the correct file)

In fact, when we asked for your stories, [user errors](https://en.wikipedia.org/wiki/User_error) came up _a lot_:

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">customer reporting that the new software was not printing the letterhead. The letterhead is fed in from a different tray in the printer. The letterhead tray was empty.</p>&mdash; My dad calls me brucellosis. (@brucelowther) <a href="https://twitter.com/brucelowther/status/1366332712932569094?ref_src=twsrc%5Etfw">March 1, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">During internship a long time ago. Everyone got paged, servers down!!! We rush to the office (yea, they hat the servers in the office) and found the cleaning lady needed a power plug while vacuuming the server room üòÖ (true story)</p>&mdash; Bart ÂÖ®ÈÉ®ÊäÄË°ì (@ZenbuTech) <a href="https://twitter.com/ZenbuTech/status/1367826235951378434?ref_src=twsrc%5Etfw">March 5, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">An employee who complained that the web app often wanted a fresh login during work. Searched and debugged nearly everything until we found out that this employee let other people work with their pc and cleaned the browser cache afterwards but wasn&#39;t aware that this reset the app.</p>&mdash; Bernhard Rausch (@rauschbit) <a href="https://twitter.com/rauschbit/status/1366499562295287813?ref_src=twsrc%5Etfw">March 1, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

As Brendan noted in [his story](https://boleary.dev/blog/2021-01-27-the-purse-caper-debugging-can-be-hard.html), "The lesson is that as humans interact with systems ‚Äì or as systems become complex enough to take actions on their own ‚Äì they will make mistakes. And while you can't possibly anticipate every one of those mistakes from the onset, when you encounter one, you can work on making sure you have observability at every level so you can see it when it happens."

## Debugging tip 2: Get the receipts

[This comment](https://www.linkedin.com/feed/update/urn:li:ugcPost:6770791699489796096?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A6770791699489796096%2C6773896843345580033%29) perfectly demonstrates why it's critical to require details such as Screen IDs when users or customers submit bug reports.

![LinkedIn comment: "a customer sharing over and over again the same old screenshot claiming that the bug still exists ... That's why all screens have now a small screenID and Version number that is required when screen-shotting issues and bugs!"](/images/blogimages/screenshot-2021-03-30-at-12.28.25.png "LinkedIn comment"){: .shadow}

## Debugging tip 3: Computers do what you tell them to

We asked you for examples of your most unexpected culprit when debugging.

<blockquote class="twitter-tweet"><p lang="und" dir="ltr">Me ü§£</p>&mdash; Steven ‡πÄ‡∏î‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (@TweetsByBooth) <a href="https://twitter.com/TweetsByBooth/status/1367859314728255490?ref_src=twsrc%5Etfw">March 5, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

We appreciate the above commenter's self awareness, which brings us to our next lesson...

The code always does exactly what you tell it to ‚Äì you just might be asking it to do something different from what you really meant. To get to the bottom of things, ask yourself what you expected the code to do versus what it actually did, and from there you'll usually find the answer staring you in the face.

## Debugging tip 4: When in doubt, investigate the usual suspects

[Occam's Razor](https://en.wikipedia.org/wiki/Occam%27s_razor) is your friend. It's often useful to rule out the obvious before you get too deep in debugging. Of course, no post about debugging would be complete without an off-by-one error, so we couldn't resist sneaking it into the title of this post (see what we did there? üòâ)

Your own codebase will no doubt have its usual suspects, as the interaction below demonstrates, so those are a good place to start.

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">DNS, it&#39;s always DNS!</p>&mdash; cronopio (@cronopio2) <a href="https://twitter.com/cronopio2/status/1367827879309025284?ref_src=twsrc%5Etfw">March 5, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">If not, is definitely SELinux</p>&mdash; ≈Åukasz Korbasiewicz (@korbasiewicz) <a href="https://twitter.com/korbasiewicz/status/1367861966446944258?ref_src=twsrc%5Etfw">March 5, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Whether bugs drive you to distraction or you enjoy the challenge (probably both?), we want to hear about yours! Share in the comments below or tweet us [@GitLab](https://twitter.com/gitlab/).

Thumbnail photo by [Andrew Wulf](https://unsplash.com/@andreuuuw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/rubber-duck?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
{: .note}
