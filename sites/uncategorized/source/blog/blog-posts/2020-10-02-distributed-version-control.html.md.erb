---
title: "Distributed Version Control & Collaboration"
author: William Galindez Arias 
author_gitlab: warias
author_twitter: WilliamAriasZ 
categories: unfiltered
image_title: '/images/blogimages/assembly-3830652.jpg'
description: "Developers can collaborate and work together in distributed environments. Adopt diverse integration patterns for branching, merging and code reviews along with granular permissions schemes ensuring code quality and safety."
tags: SCM, CI
ee_cta: false # required only if you do not want to display the EE-trial banner
install_cta: false # required only if you do not want to display the 'Install GitLab' banner
---
{::options parse_block_html="true" /}



[Distributed Version Control](/topics/version-control/)  allows  remote, collaborative work to flourish since a single copy of the complete project's history can be stored in any machine. But Distributed Version Control goes beyond every developer having a copy of the project in their machines, in fact it sets the foundation for a team to decide what strategy they need to adopt to deliver software.


With Gitlab a team can choose and adapt to different branching strategies that enable Continuous Integration being an example of that   high-frequency integration patterns where developers push very often local commits to the main branch, this is achieved through Gitlab Merge Request that favors short-lived branches augmenting the frequency of merges. 
Distributed Version Control and Collaboration  are cornerstone for software development lifecycle, Watch this video to see its capabilities in action

<iframe width="560" height="315" src="https://www.youtube.com/embed/JAgIEdYhj00" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


Cover image credit:

Cover image by [www_slon_pics](https://pixabay.com/photos/assembly-carpenter-carpentry-3830652/) on [pixabay](https://pixabay.com)
{: .note}

