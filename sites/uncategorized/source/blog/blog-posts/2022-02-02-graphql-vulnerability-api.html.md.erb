---
title: "Using the GitLab GraphQL API for vulnerability reporting"
author: Fernando Diaz
author_gitlab: fjdiaz
author_twitter: awkwardferny
categories: security
tags: DevOps, security, engineering
description: "Follow along as we teach you how to use GitLab GraphQL API to manage vulnerabilities programatically."
image_title: /images/blogimages/jeremy-bishop-FzrlPh20l7Q-unsplash.jpg
twitter_text: "Leverage the @gitlab GraphQL API to manage vulnerabilities programatically"
twitter_image: /images/blogimages/jeremy-bishop-FzrlPh20l7Q-unsplash.jpg
---

As part of GitLab Ultimate, you have access to the Vulnerability Report,
which provides information about vulnerabilities from scans of the default
branch. It is available for projects, groups, and the Security Center.
From the Vulnerability Report you can:

- filter the list of vulnerabilities
- view more details about a vulnerability
- view vulnerable source location (if available)
- view an issue raised for a vulnerability
- change the status of vulnerabilities
- export details of vulnerabilities

You also get to perform functions (create/read/update/delete) on vulnerabilities using the GitLab GraphQL API.

In this blog post, I'll go over some of the GitLab GraphQL API and show how
vulnerabilities can be managed with the API. Then I'll go over how to create a
custom page where a user can report a vulnerability.

## GitLab GraphQL API

GraphQL is a query language for APIs that allows clients to request exactly
the data they need, making it possible to get all required data in a limited
number of requests.

With the GitLab GraphQL API, you can perform many different functions on
vulnerabilities which can be seen in the Vulnerability Reports. You can
perform queries for data retrieval or mutations for creating, updating,
and deleting data. 

There are many other functions that can be performed on vulnerabilities using the
GraphQL API, such as querying for vulnerability data, changing a vulnerability's
status, and much more. You can see the rest of the GraphQL API functions by viewing
the graphql [reference page](https://docs.gitlab.com/ee/api/graphql/reference/).

## Running a GraphQL query to create a vulnerability

You can run GraphQL queries in a curl request on the command line on your local
computer. A GraphQL request can be made as a POST request to `/api/graphql` with
the query as the payload. You can authorize your request by generating a
personal access token to use as a bearer token.

We will be using [Mutation.vulnerabilityCreate](https://docs.gitlab.com/ee/api/graphql/reference/#mutationvulnerabilitycreate)
in order to create a vulnerability.

**1.** Create a new project or use an existing project.

**2.** Create a [Personal Access Token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token).

**Note:** Make sure it is `api` scoped.  

**3.** Set the Personal Access Token in the environment variables.

    ```
    $ export ACCESS_TOKEN=<your-personal-access-token>
    ```

**4.** Get your Project ID to use in the curl request.

**Note:** Project ID can be found in your project page  

![](/images/blogimages/2022-graphql-vuln-api/show_projectid.png)  

**5.** Send a curl request to graphql api.

    ```
    $ curl -g --header "Authorization: Bearer $ACCESS_TOKEN" --header "Content-Type: application/json" --request POST --data '{"query": "mutation { vulnerabilityCreate(input: {clientMutationId: \"Ferns-Vuln-Reporter-Xtreme\", name: \"YEETTT\", project: \"gid://gitlab/Project/30857578\", description: \"ax\", scanner: {name: \"dude-scanner2\", id: \"123456\", url: \"localhost\", version: \"1.0\"}, identifiers: [{name: \"dont worry about its ok\", url: \"localhost\"}]}) { clientMutationId \n vulnerability {  id  } \n errors } }" }' https://gitlab.com/api/graphql

    {"data":{"vulnerabilityCreate":{"clientMutationId":"Ferns-Vuln-Reporter-Xtreme","vulnerability":{"id":"gid://gitlab/Vulnerability/29086674"},"errors":[]}}}
    ```

You can see that the resonse will provide some data. Let's save the provided vulnerability
id, 29086674.  

**Note:** You can see where I used the Project ID in the query above,
by searching for "30857578". Also feel free to customize the strings in
the request.  

**6.** Go to your project and click on the `Security & Compliance > Vulnerability Report`.

**7.** Replace `vulnerability_report` in the url with `/vulnerabilities/29086674`, and you should
see detailed information on the vulnerability you submitted.

![](/images/blogimages/2022-graphql-vuln-api/vuln_saved.png)  

## Creating a Vulnerability Report site

Now let's put what we learned about the Vulnerability API into creating an application
we can use for others to report vulnerabilities.

I created a basic application that uses the GraphQL API to create vulnerabilities for
a given project. It's a little GoLang web-application that deploys to Kubernetes and
contains a basic web-form.

**Note:** To continue with this section, you need a Kubernetes Cluster, GitLab Account, and
knowledge of the GitLab [Kubernetes-Agent](https://docs.gitlab.com/ee/user/clusters/agent/).

**1.** Create a [Personal Access Token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token).

**Note:** Make sure it is `api` scoped.  

**2.** Create a new project and select import.

![](/images/blogimages/2022-graphql-vuln-api/import_project.png)  

**3.** Import the [Vuln-Reporter](https://gitlab.com/tech-marketing/devsecops/vuln-reporter).

![](/images/blogimages/2022-graphql-vuln-api/repo_url.png)  

**4.** Connect to a Kubernetes Cluster using the [Kubernetes-Agent](https://docs.gitlab.com/ee/user/clusters/agent/install/index.html).

**5.** Add the [Ingress Controller](https://docs.gitlab.com/ee/user/infrastructure/clusters/manage/management_project_applications/ingress.html) as a [Cluster Management Application](https://docs.gitlab.com/ee/user/clusters/management_project_template.html).

**Note:** Once the Kubernetes Agent is installed, this can be done by simply adding
the `applications` folder, `helmfile.yaml`, and `apply` job present in this [Infrastrucuture project](https://gitlab.com/tech-marketing/devsecops/initech/infrastructure).

**6.** Add the following variables under `Settings > CICD > Variables`:

    - PROJECT_ID: The id of the project you want to report on.
    - ACCESS_TOKEN: Your personal access token created earlier.

**7.** Run the pipeline.

**8.** Connect to Kubernetes Cluster and find the Load Balancer IP.

    ```
    $ kubectl get svc -n gitlab-managed-apps | grep ingress

    ingress-ingress-nginx-controller             LoadBalancer   10.28.13.2    104.198.204.142   80:31853/TCP,443:31835/TCP   19d
    ingress-ingress-nginx-controller-admission   ClusterIP      10.28.6.20    <none>            443/TCP                      19d
    ```

**Note:** It's the `104.198.204.142` address, but it may be different for you. Just make sure it's
an external address.  

**9.** Go to `http://<Load-Balancer-IP>/reporter` in your browser.

**10.** Add info and submit a Vulnerability.

![](/images/blogimages/2022-graphql-vuln-api/submit_vuln.png)  

After submitting you should get a link. Copy that link
into your browser.


**11.** View the Vulnerability Report.

![](/images/blogimages/2022-graphql-vuln-api/vuln_report.png)

---

This is just one of the many cool things that can be done using the GitLab
GraphQL API. I encourage you to check it out and get started on building your
own integrations!

### Read more on security:

- [Detecting and alerting on anomalies in your container host with GitLab + Falco](/blog/2022/01/20/securing-the-container-host-with-falco/)
- [Three things you might not know about GitLab security](/blog/2021/11/23/three-things-you-might-not-know-about-gitlab-security/)
- [How to tailor SAST and Secret Detection to your application context with custom rulesets](/blog/2021/12/21/rule-pack-synthesis/)


_Photo by Jeremy Bishop on [Unsplash](https://unsplash.com/t/textures-patterns?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)._
