---
title: "Examples of legacy modernisation projects"
window_title: "4 Successful examples of application modernization | GitLab"
author: Chrissie Buchanan
author_gitlab: cbuchanan
categories: engineering
image_title: '/images/blogimages/just-commit-blog-cover.png'
description: "Discover how four teams committed to the application modernization process."
tags: CI/CD, DevOps, cloud native
cta_button_text: 'Just commit' # optional
cta_button_link: '/blog/2019/03/27/application-modernization-best-practices/' # optional
twitter_text: "4 successful examples of application modernization #JustCommit"
postType: content marketing
---

Fine wine and cheese. Whiskey. Paul Rudd. There are a lot of things that get better with age â€“ legacy systems are _not_ one of them.

## The true cost of legacy systems

Over time, the true cost of legacy systems is enormous: from additional resources needed to maintain them, to lost productivity, they can hinder investments in long-term growth. In highly regulated industries, they can even be a financial liability.
[Health Insurance Portability and Accountability Act (HIPAA) violations in 2018 resulted in over $28 million in fines](https://compliancy-group.com/hipaa-fines-directory-year/), many of them due to data breaches.
As legacy systems grow older, it's [easy to miss critical security patches (if any are even available)](https://www.globalscape.com/blog/how-high-risk-legacy-systems-are-hurting-your-business), making your system more vulnerable to malicious actors ready to use old Java and SSL exploits to expose your network.

Even if we can all agree that legacy system modernization is important, it still takes work.
[Analysis paralysis is a real phenomenon in the digital transformation journey](/blog/2019/02/25/beyond-application-modernization-trends/).
Ripping off the band-aid and committing to faster deployment feels overwhelming, and there are so many application modernization trends to consider. But not taking action puts a ceiling on growth.

## Status quo < Innovation

Many large enterprises feel tied down to current practices because there just aren't enough resources left to innovate once legacy systems are maintained.
For example, [the greater part of the IT-related federal budget of the United States ($80 billion) goes to maintaining legacy systems.](https://www.spiria.com/en/blog/method-and-best-practices/cost-legacy-systems/)
When large companies can only devote 20 percent of their budget to software modernization, things move even more slowly.
Obsolete systems create a vicious cycle where enterprises feel they have to choose between innovation or keeping things running.

Instead of focusing on a full rip-and-replace of legacy systems, an application modernization strategy that identifies specific challenges reduces potential disruptions.
Making goals and achieving them one step at a time can make a big impact.

## How to modernize applications

These examples of legacy application modernization show how four teams identified challenges, set manageable goals, and decided to [#JustCommit](https://twitter.com/search?q=just+commit) to development efficiency.

### 1. Leveraging microservices

With a monolithic architecture, everything is developed, deployed, and scaled together.
With microservices, each component is broken out and deployed individually as services and the services communicate with each other via API calls.
[Leveraging microservices allows teams to deploy faster and achieve scale, all at a lower cost](/topics/microservices/).
Ask Media Group recently participated in a webcast where they discussed their transition from monoliths to microservices leveraging containers, Kubernetes, and AWS.

[Watch the webcast](/webcast/cloud-native-transformation/)
{: .alert .alert-gitlab-purple}

### 2. Improving automation

Equinix, a leading global data center company with over 180+ colocation facilities across five continents, wanted a solution that would help developers code better and faster, to bring customers new features quickly.
While their old system was fine in the beginning, they needed a more robust solution that could meet their enterprise control and scaling needs. See how Equinix increased the agility of their developers, without sacrificing quality, through automation.

{: .alert .alert-gitlab-purple}

### 3. Simplifying the toolchain

Goldman Sachs, one of the largest financial institutions in the world with over $1.5 trillion in assets, had some challenges in their technology division.
As a critical center of the financial provider's business, speed is essential, but a complex toolchain with too many parts was slowing them down.
In order to have faster deployment cycles and increase concurrent development, they knew they needed to simplify their toolchain. One cohesive environment helped them improve visibility and efficiency.

[Read the case study](/customers/goldman-sachs/)
{: .alert .alert-gitlab-purple}

### 4. Reducing lifecycles

Chris Hill, Head of Systems Engineering for Infotainment at Jaguar Land Rover, shared his team's journey from feedback loops of 4-6 weeks to _just 30 minutes_ at the DevOps Enterprise Summit London in 2018.
Who says you need to be stuck with a traditional release cadence?

[Watch the presentation](/blog/2018/07/23/chris-hill-devops-enterprise-summit-talk/)
{: .alert .alert-gitlab-purple}

Are you ready to tackle application modernization? [Just commit.](/blog/2019/03/27/application-modernization-best-practices/)
