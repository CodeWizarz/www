---
title: "How can teams secure applications at DevOps speed? Security Dashboards are here to help."
author: Cindy Blake
author_gitlab: cblake
author_twitter: CBlake2000
categories: engineering
image_title: '/images/blogimages/inside-gitlab-security-dashboards.jpg'
tags: DevOps, features, inside GitLab, security
description: "GitLab Security Dashboards enable security professionals to view vulnerabilities across a project. Here’s an inside look."
cta_button_text: 'Watch the <strong>11.1 Release Radar</strong> recording!'
cta_button_link: 'https://www.youtube.com/watch?v=P0a6pdCeg1A'
ee_cta: false
twitter_text: "Inside @gitlab Security Dashboards"
featured: yes
---

Business survival today depends on a radically faster DevOps lifecycle, but how can teams secure applications at DevOps speed? It’s a thorny problem for a number of reasons: applications are a prime target for cyber attacks; most [application security](/topics/devsecops/) tools are resource intensive, requiring integration of both technology and processes; and testers face the dilemma of when and how often to test code that is iteratively changed right up until it’s deployed. Many are faced with weighing the need to test each iteration against the speed and cost of doing so, while the possibility of a rollback looms in the case of an unforeseen security vulnerability.

>Many are faced with weighing the need to test each iteration against the speed and cost of doing so

We know that shifting left and discovering vulnerabilities earlier in the development process is important, but it’s tough to find the perfect balance, where teams can be confident they’re truly creating business value and not becoming a business inhibitor. It’s clear that our existing application security tools are colliding with modern development. So what if you could scan all code, every time for development, using fewer tools instead of more, and have developers and operations on the same page instead of adversarial?

### Built-in security products

<%= partial "includes/blog/content-newsletter-cta", locals: { variant: "b" } %>

It’s going to take a fundamental shift by companies towards proactive security. With security issues reported directly in merge requests, one license cost for integrated security, and zero context-switching to proactively secure applications, we believe GitLab can help get you there.

Using multiple tools forces developers to switch away from their primary objective of developing code, or requires integrated workflows with security pros. We believe successful tools will add high value while minimizing distraction for engineers. With GitLab, [SAST](https://docs.gitlab.com/ee/user/application_security/sast/), [DAST](https://docs.gitlab.com/ee/user/application_security/dast/), [container scanning](https://docs.gitlab.com/ee/user/application_security/container_scanning/), [dependency scanning](https://docs.gitlab.com/ee/user/application_security/dependency_scanning/), and [license management](https://docs.gitlab.com/ee/user/compliance/license_compliance/index.html) are all built in. Because there’s one tool for the software development lifecycle, you can automatically run tests on all code commits, early in the development process.

### Security Dashboard demo
In 11.1, [we shipped Security Dashboards](/releases/2018/07/22/gitlab-11-1-released/), to help serve security professionals. Traditionally we’ve focused on the developer, but the Security Dashboard is meant to enable security professionals to view vulnerabilities across a project. Here’s a quick look at our first iteration of the Security Dashboard:

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/U2_dqwTRUVk" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

Keep an eye out for [improvements](https://gitlab.com/gitlab-org/gitlab-ee/issues/6709), and let us know what you think by tweeting us [@gitlab](https://twitter.com/gitlab)!

Cover photo by [Christian EM](https://unsplash.com/photos/J7EUjSlNQtg) on [Unsplash](https://unsplash.com/)
{: .note}
